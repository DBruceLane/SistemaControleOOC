ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	hi2c1
  16              		.section	.bss.hi2c1,"aw",%nobits
  17              		.align	2
  20              	hi2c1:
  21 0000 00000000 		.space	84
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	htim3
  23              		.section	.bss.htim3,"aw",%nobits
  24              		.align	2
  27              	htim3:
  28 0000 00000000 		.space	72
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.global	htim4
  30              		.section	.bss.htim4,"aw",%nobits
  31              		.align	2
  34              	htim4:
  35 0000 00000000 		.space	72
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.global	aLastState
  37              		.section	.bss.aLastState,"aw",%nobits
  40              	aLastState:
  41 0000 00       		.space	1
  42              		.global	aState
  43              		.section	.bss.aState,"aw",%nobits
  46              	aState:
  47 0000 00       		.space	1
  48              		.global	counter
  49              		.section	.bss.counter,"aw",%nobits
  50              		.align	2
  53              	counter:
  54 0000 00000000 		.space	4
  55              		.global	iStep
  56              		.section	.bss.iStep,"aw",%nobits
  57              		.align	2
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 2


  60              	iStep:
  61 0000 00000000 		.space	4
  62              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
  63              		.align	1
  64              		.global	HAL_TIM_PeriodElapsedCallback
  65              		.arch armv7-m
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu softvfp
  71              	HAL_TIM_PeriodElapsedCallback:
  72              	.LFB65:
  73              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** // Button
  26:Core/Src/main.c **** #include "stdbool.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** // OLED
  29:Core/Src/main.c **** #include "fonts.h"
  30:Core/Src/main.c **** #include "ssd1306.h"
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** // StepperMotor
  42:Core/Src/main.c **** #define stepsperrev 4096
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 3


  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  54:Core/Src/main.c **** TIM_HandleTypeDef htim4;
  55:Core/Src/main.c **** 
  56:Core/Src/main.c **** /* USER CODE BEGIN PV */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** // RotButton
  59:Core/Src/main.c **** GPIO_PinState aLastState;
  60:Core/Src/main.c **** GPIO_PinState aState;
  61:Core/Src/main.c **** uint32_t counter;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** // StepperMotor
  64:Core/Src/main.c **** uint32_t iStep;
  65:Core/Src/main.c **** /* USER CODE END PV */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  68:Core/Src/main.c **** void SystemClock_Config(void);
  69:Core/Src/main.c **** static void MX_GPIO_Init(void);
  70:Core/Src/main.c **** static void MX_I2C1_Init(void);
  71:Core/Src/main.c **** static void MX_TIM4_Init(void);
  72:Core/Src/main.c **** static void MX_TIM3_Init(void);
  73:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  74:Core/Src/main.c **** 
  75:Core/Src/main.c **** // StepperMotor
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) // Interrupt do passo do motor
  78:Core/Src/main.c **** {
  74              		.loc 1 78 1
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 8
  77              		@ frame_needed = 1, uses_anonymous_args = 0
  78 0000 80B5     		push	{r7, lr}
  79              	.LCFI0:
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              	.LCFI1:
  85              		.cfi_def_cfa_offset 16
  86 0004 00AF     		add	r7, sp, #0
  87              	.LCFI2:
  88              		.cfi_def_cfa_register 7
  89 0006 7860     		str	r0, [r7, #4]
  79:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 1);
  90              		.loc 1 79 3
  91 0008 0122     		movs	r2, #1
  92 000a 0821     		movs	r1, #8
  93 000c 0348     		ldr	r0, .L2
  94 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
  80:Core/Src/main.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 4


  81:Core/Src/main.c **** /*
  82:Core/Src/main.c ****   static uint32_t millis = 0;
  83:Core/Src/main.c ****   millis++;
  84:Core/Src/main.c ****   if (millis % 1000 == 0) {
  85:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 0);
  86:Core/Src/main.c ****   }
  87:Core/Src/main.c ****   */
  88:Core/Src/main.c ****   
  89:Core/Src/main.c **** }
  95              		.loc 1 89 1
  96 0012 00BF     		nop
  97 0014 0837     		adds	r7, r7, #8
  98              	.LCFI3:
  99              		.cfi_def_cfa_offset 8
 100 0016 BD46     		mov	sp, r7
 101              	.LCFI4:
 102              		.cfi_def_cfa_register 13
 103              		@ sp needed
 104 0018 80BD     		pop	{r7, pc}
 105              	.L3:
 106 001a 00BF     		.align	2
 107              	.L2:
 108 001c 000C0140 		.word	1073810432
 109              		.cfi_endproc
 110              	.LFE65:
 112              		.section	.text.main,"ax",%progbits
 113              		.align	1
 114              		.global	main
 115              		.syntax unified
 116              		.thumb
 117              		.thumb_func
 118              		.fpu softvfp
 120              	main:
 121              	.LFB66:
  90:Core/Src/main.c **** /* USER CODE END PFP */
  91:Core/Src/main.c **** 
  92:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  93:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  94:Core/Src/main.c **** 
  95:Core/Src/main.c **** /* USER CODE END 0 */
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** /**
  98:Core/Src/main.c ****   * @brief  The application entry point.
  99:Core/Src/main.c ****   * @retval int
 100:Core/Src/main.c ****   */
 101:Core/Src/main.c **** int main(void)
 102:Core/Src/main.c **** {
 122              		.loc 1 102 1
 123              		.cfi_startproc
 124              		@ args = 0, pretend = 0, frame = 8
 125              		@ frame_needed = 1, uses_anonymous_args = 0
 126 0000 80B5     		push	{r7, lr}
 127              	.LCFI5:
 128              		.cfi_def_cfa_offset 8
 129              		.cfi_offset 7, -8
 130              		.cfi_offset 14, -4
 131 0002 82B0     		sub	sp, sp, #8
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 5


 132              	.LCFI6:
 133              		.cfi_def_cfa_offset 16
 134 0004 00AF     		add	r7, sp, #0
 135              	.LCFI7:
 136              		.cfi_def_cfa_register 7
 103:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 104:Core/Src/main.c ****   uint32_t i;
 105:Core/Src/main.c ****   /* USER CODE END 1 */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 108:Core/Src/main.c **** 
 109:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 110:Core/Src/main.c ****   HAL_Init();
 137              		.loc 1 110 3
 138 0006 FFF7FEFF 		bl	HAL_Init
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* USER CODE END Init */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* Configure the system clock */
 117:Core/Src/main.c ****   SystemClock_Config();
 139              		.loc 1 117 3
 140 000a FFF7FEFF 		bl	SystemClock_Config
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* USER CODE END SysInit */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   /* Initialize all configured peripherals */
 124:Core/Src/main.c ****   MX_GPIO_Init();
 141              		.loc 1 124 3
 142 000e FFF7FEFF 		bl	MX_GPIO_Init
 125:Core/Src/main.c ****   MX_I2C1_Init();
 143              		.loc 1 125 3
 144 0012 FFF7FEFF 		bl	MX_I2C1_Init
 126:Core/Src/main.c ****   MX_TIM4_Init();
 145              		.loc 1 126 3
 146 0016 FFF7FEFF 		bl	MX_TIM4_Init
 127:Core/Src/main.c ****   MX_TIM3_Init();
 147              		.loc 1 127 3
 148 001a FFF7FEFF 		bl	MX_TIM3_Init
 128:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 129:Core/Src/main.c **** 
 130:Core/Src/main.c ****   // Rot Button
 131:Core/Src/main.c ****   /*
 132:Core/Src/main.c ****   aLastState = HAL_GPIO_ReadPin(GPIOA,ButtonA_Pin);
 133:Core/Src/main.c ****   counter = 100;
 134:Core/Src/main.c ****   */
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   // OLED
 137:Core/Src/main.c ****   
 138:Core/Src/main.c ****   //char snum[5];
 139:Core/Src/main.c ****   //SSD1306_Init ();
 140:Core/Src/main.c **** 
 141:Core/Src/main.c ****   /*
 142:Core/Src/main.c ****   SSD1306_Init (); // initialize the display 
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 6


 143:Core/Src/main.c ****   HAL_Delay(3000);
 144:Core/Src/main.c ****   SSD1306_Clear();
 145:Core/Src/main.c ****   HAL_Delay(3000);
 146:Core/Src/main.c ****   SSD1306_GotoXY (10,10); // goto 10, 10 
 147:Core/Src/main.c ****   SSD1306_Puts ("HELLO", &Font_11x18, 1); // print Hello 
 148:Core/Src/main.c ****   SSD1306_GotoXY (10, 30); 
 149:Core/Src/main.c ****   SSD1306_Puts ("WORLD !!", &Font_11x18, 1); 
 150:Core/Src/main.c ****   SSD1306_UpdateScreen(); // update screen
 151:Core/Src/main.c ****   */
 152:Core/Src/main.c ****   
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   // StepperMotor
 155:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, MotorDIR_Pin, GPIO_PIN_SET); // Sentido Horario
 149              		.loc 1 155 3
 150 001e 0122     		movs	r2, #1
 151 0020 1021     		movs	r1, #16
 152 0022 1448     		ldr	r0, .L8
 153 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 156:Core/Src/main.c ****   //HAL_GPIO_WritePin(GPIOB, MotorDIR_Pin, GPIO_PIN_RESET); // Sentido AntiHorario
 157:Core/Src/main.c ****   iStep = 0;
 154              		.loc 1 157 9
 155 0028 134B     		ldr	r3, .L8+4
 156 002a 0022     		movs	r2, #0
 157 002c 1A60     		str	r2, [r3]
 158:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim4);
 158              		.loc 1 158 3
 159 002e 1348     		ldr	r0, .L8+8
 160 0030 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 161              	.L7:
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* USER CODE END 2 */
 161:Core/Src/main.c **** 
 162:Core/Src/main.c ****   /* Infinite loop */
 163:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 164:Core/Src/main.c ****   while (1)
 165:Core/Src/main.c ****   {
 166:Core/Src/main.c ****     // Blink LED
 167:Core/Src/main.c ****     
 168:Core/Src/main.c ****     for (i = 0; i < 8; i++)
 162              		.loc 1 168 12
 163 0034 0023     		movs	r3, #0
 164 0036 7B60     		str	r3, [r7, #4]
 165              		.loc 1 168 5
 166 0038 14E0     		b	.L5
 167              	.L6:
 169:Core/Src/main.c ****     {
 170:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, LEDc13_Pin, 0);
 168              		.loc 1 170 7 discriminator 3
 169 003a 0022     		movs	r2, #0
 170 003c 4FF40051 		mov	r1, #8192
 171 0040 0F48     		ldr	r0, .L8+12
 172 0042 FFF7FEFF 		bl	HAL_GPIO_WritePin
 171:Core/Src/main.c ****       HAL_Delay(25);
 173              		.loc 1 171 7 discriminator 3
 174 0046 1920     		movs	r0, #25
 175 0048 FFF7FEFF 		bl	HAL_Delay
 172:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, LEDc13_Pin, 1);
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 7


 176              		.loc 1 172 7 discriminator 3
 177 004c 0122     		movs	r2, #1
 178 004e 4FF40051 		mov	r1, #8192
 179 0052 0B48     		ldr	r0, .L8+12
 180 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 173:Core/Src/main.c ****       HAL_Delay(50);
 181              		.loc 1 173 7 discriminator 3
 182 0058 3220     		movs	r0, #50
 183 005a FFF7FEFF 		bl	HAL_Delay
 168:Core/Src/main.c ****     {
 184              		.loc 1 168 25 discriminator 3
 185 005e 7B68     		ldr	r3, [r7, #4]
 186 0060 0133     		adds	r3, r3, #1
 187 0062 7B60     		str	r3, [r7, #4]
 188              	.L5:
 168:Core/Src/main.c ****     {
 189              		.loc 1 168 5 discriminator 1
 190 0064 7B68     		ldr	r3, [r7, #4]
 191 0066 072B     		cmp	r3, #7
 192 0068 E7D9     		bls	.L6
 174:Core/Src/main.c ****     }
 175:Core/Src/main.c ****     HAL_Delay(800);
 193              		.loc 1 175 5
 194 006a 4FF44870 		mov	r0, #800
 195 006e FFF7FEFF 		bl	HAL_Delay
 168:Core/Src/main.c ****     {
 196              		.loc 1 168 12
 197 0072 DFE7     		b	.L7
 198              	.L9:
 199              		.align	2
 200              	.L8:
 201 0074 000C0140 		.word	1073810432
 202 0078 00000000 		.word	iStep
 203 007c 00000000 		.word	htim4
 204 0080 00100140 		.word	1073811456
 205              		.cfi_endproc
 206              	.LFE66:
 208              		.section	.text.SystemClock_Config,"ax",%progbits
 209              		.align	1
 210              		.global	SystemClock_Config
 211              		.syntax unified
 212              		.thumb
 213              		.thumb_func
 214              		.fpu softvfp
 216              	SystemClock_Config:
 217              	.LFB67:
 176:Core/Src/main.c ****     
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****     
 179:Core/Src/main.c ****     // Rot Button
 180:Core/Src/main.c ****     /*
 181:Core/Src/main.c **** 	  aState = HAL_GPIO_ReadPin(GPIOA,ButtonA_Pin);
 182:Core/Src/main.c **** 	  if (aState != aLastState){
 183:Core/Src/main.c **** 		  if (HAL_GPIO_ReadPin(GPIOA,ButtonB_Pin) != aState) {
 184:Core/Src/main.c **** 			  counter ++; // Sentido Horario
 185:Core/Src/main.c **** 		  } else{
 186:Core/Src/main.c **** 			  counter --; // Sentido Anti Horario
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 8


 187:Core/Src/main.c **** 		  }
 188:Core/Src/main.c **** 	  }
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****     aLastState = aState;
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****     if(counter < 10){
 193:Core/Src/main.c ****       counter = 10;
 194:Core/Src/main.c ****     }
 195:Core/Src/main.c ****     */
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** 	  // OLED
 198:Core/Src/main.c ****     /*
 199:Core/Src/main.c **** 	  itoa(counter, snum, 10);
 200:Core/Src/main.c **** 	  SSD1306_Puts (snum, &Font_16x26, 1);
 201:Core/Src/main.c **** 	  SSD1306_UpdateScreen();
 202:Core/Src/main.c **** 	  HAL_Delay (500);
 203:Core/Src/main.c ****     */
 204:Core/Src/main.c ****     
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** 	  // StepperMotor
 207:Core/Src/main.c ****     /*
 208:Core/Src/main.c **** 	  for (iStep=0; iStep < stepsperrev; iStep++){
 209:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 1);
 210:Core/Src/main.c **** 		  HAL_Delay(10);
 211:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 0);
 212:Core/Src/main.c **** 		  HAL_Delay(10);
 213:Core/Src/main.c **** 	  }
 214:Core/Src/main.c ****     */
 215:Core/Src/main.c ****     
 216:Core/Src/main.c ****     /* USER CODE END WHILE */
 217:Core/Src/main.c **** 
 218:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 219:Core/Src/main.c ****   }
 220:Core/Src/main.c ****   /* USER CODE END 3 */
 221:Core/Src/main.c **** }
 222:Core/Src/main.c **** 
 223:Core/Src/main.c **** /**
 224:Core/Src/main.c ****   * @brief System Clock Configuration
 225:Core/Src/main.c ****   * @retval None
 226:Core/Src/main.c ****   */
 227:Core/Src/main.c **** void SystemClock_Config(void)
 228:Core/Src/main.c **** {
 218              		.loc 1 228 1
 219              		.cfi_startproc
 220              		@ args = 0, pretend = 0, frame = 64
 221              		@ frame_needed = 1, uses_anonymous_args = 0
 222 0000 80B5     		push	{r7, lr}
 223              	.LCFI8:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 7, -8
 226              		.cfi_offset 14, -4
 227 0002 90B0     		sub	sp, sp, #64
 228              	.LCFI9:
 229              		.cfi_def_cfa_offset 72
 230 0004 00AF     		add	r7, sp, #0
 231              	.LCFI10:
 232              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 9


 229:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 233              		.loc 1 229 22
 234 0006 07F11803 		add	r3, r7, #24
 235 000a 2822     		movs	r2, #40
 236 000c 0021     		movs	r1, #0
 237 000e 1846     		mov	r0, r3
 238 0010 FFF7FEFF 		bl	memset
 230:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 239              		.loc 1 230 22
 240 0014 3B1D     		adds	r3, r7, #4
 241 0016 0022     		movs	r2, #0
 242 0018 1A60     		str	r2, [r3]
 243 001a 5A60     		str	r2, [r3, #4]
 244 001c 9A60     		str	r2, [r3, #8]
 245 001e DA60     		str	r2, [r3, #12]
 246 0020 1A61     		str	r2, [r3, #16]
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 233:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 234:Core/Src/main.c ****   */
 235:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 247              		.loc 1 235 36
 248 0022 0123     		movs	r3, #1
 249 0024 BB61     		str	r3, [r7, #24]
 236:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 250              		.loc 1 236 30
 251 0026 4FF48033 		mov	r3, #65536
 252 002a FB61     		str	r3, [r7, #28]
 237:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 253              		.loc 1 237 36
 254 002c 0023     		movs	r3, #0
 255 002e 3B62     		str	r3, [r7, #32]
 238:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 256              		.loc 1 238 30
 257 0030 0123     		movs	r3, #1
 258 0032 BB62     		str	r3, [r7, #40]
 239:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 259              		.loc 1 239 34
 260 0034 0223     		movs	r3, #2
 261 0036 7B63     		str	r3, [r7, #52]
 240:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 262              		.loc 1 240 35
 263 0038 4FF48033 		mov	r3, #65536
 264 003c BB63     		str	r3, [r7, #56]
 241:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 265              		.loc 1 241 32
 266 003e 4FF4E013 		mov	r3, #1835008
 267 0042 FB63     		str	r3, [r7, #60]
 242:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 268              		.loc 1 242 7
 269 0044 07F11803 		add	r3, r7, #24
 270 0048 1846     		mov	r0, r3
 271 004a FFF7FEFF 		bl	HAL_RCC_OscConfig
 272 004e 0346     		mov	r3, r0
 273              		.loc 1 242 6
 274 0050 002B     		cmp	r3, #0
 275 0052 01D0     		beq	.L11
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 10


 243:Core/Src/main.c ****   {
 244:Core/Src/main.c ****     Error_Handler();
 276              		.loc 1 244 5
 277 0054 FFF7FEFF 		bl	Error_Handler
 278              	.L11:
 245:Core/Src/main.c ****   }
 246:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 247:Core/Src/main.c ****   */
 248:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 279              		.loc 1 248 31
 280 0058 0F23     		movs	r3, #15
 281 005a 7B60     		str	r3, [r7, #4]
 249:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 250:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 282              		.loc 1 250 34
 283 005c 0223     		movs	r3, #2
 284 005e BB60     		str	r3, [r7, #8]
 251:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 285              		.loc 1 251 35
 286 0060 0023     		movs	r3, #0
 287 0062 FB60     		str	r3, [r7, #12]
 252:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 288              		.loc 1 252 36
 289 0064 4FF48063 		mov	r3, #1024
 290 0068 3B61     		str	r3, [r7, #16]
 253:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 291              		.loc 1 253 36
 292 006a 0023     		movs	r3, #0
 293 006c 7B61     		str	r3, [r7, #20]
 254:Core/Src/main.c **** 
 255:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 294              		.loc 1 255 7
 295 006e 3B1D     		adds	r3, r7, #4
 296 0070 0221     		movs	r1, #2
 297 0072 1846     		mov	r0, r3
 298 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 299 0078 0346     		mov	r3, r0
 300              		.loc 1 255 6
 301 007a 002B     		cmp	r3, #0
 302 007c 01D0     		beq	.L13
 256:Core/Src/main.c ****   {
 257:Core/Src/main.c ****     Error_Handler();
 303              		.loc 1 257 5
 304 007e FFF7FEFF 		bl	Error_Handler
 305              	.L13:
 258:Core/Src/main.c ****   }
 259:Core/Src/main.c **** }
 306              		.loc 1 259 1
 307 0082 00BF     		nop
 308 0084 4037     		adds	r7, r7, #64
 309              	.LCFI11:
 310              		.cfi_def_cfa_offset 8
 311 0086 BD46     		mov	sp, r7
 312              	.LCFI12:
 313              		.cfi_def_cfa_register 13
 314              		@ sp needed
 315 0088 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 11


 316              		.cfi_endproc
 317              	.LFE67:
 319              		.section	.text.MX_I2C1_Init,"ax",%progbits
 320              		.align	1
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 324              		.fpu softvfp
 326              	MX_I2C1_Init:
 327              	.LFB68:
 260:Core/Src/main.c **** 
 261:Core/Src/main.c **** /**
 262:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 263:Core/Src/main.c ****   * @param None
 264:Core/Src/main.c ****   * @retval None
 265:Core/Src/main.c ****   */
 266:Core/Src/main.c **** static void MX_I2C1_Init(void)
 267:Core/Src/main.c **** {
 328              		.loc 1 267 1
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 0
 331              		@ frame_needed = 1, uses_anonymous_args = 0
 332 0000 80B5     		push	{r7, lr}
 333              	.LCFI13:
 334              		.cfi_def_cfa_offset 8
 335              		.cfi_offset 7, -8
 336              		.cfi_offset 14, -4
 337 0002 00AF     		add	r7, sp, #0
 338              	.LCFI14:
 339              		.cfi_def_cfa_register 7
 268:Core/Src/main.c **** 
 269:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 272:Core/Src/main.c **** 
 273:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 276:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 340              		.loc 1 276 18
 341 0004 124B     		ldr	r3, .L17
 342 0006 134A     		ldr	r2, .L17+4
 343 0008 1A60     		str	r2, [r3]
 277:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 344              		.loc 1 277 25
 345 000a 114B     		ldr	r3, .L17
 346 000c 124A     		ldr	r2, .L17+8
 347 000e 5A60     		str	r2, [r3, #4]
 278:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 348              		.loc 1 278 24
 349 0010 0F4B     		ldr	r3, .L17
 350 0012 0022     		movs	r2, #0
 351 0014 9A60     		str	r2, [r3, #8]
 279:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 352              		.loc 1 279 26
 353 0016 0E4B     		ldr	r3, .L17
 354 0018 0022     		movs	r2, #0
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 12


 355 001a DA60     		str	r2, [r3, #12]
 280:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 356              		.loc 1 280 29
 357 001c 0C4B     		ldr	r3, .L17
 358 001e 4FF48042 		mov	r2, #16384
 359 0022 1A61     		str	r2, [r3, #16]
 281:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 360              		.loc 1 281 30
 361 0024 0A4B     		ldr	r3, .L17
 362 0026 0022     		movs	r2, #0
 363 0028 5A61     		str	r2, [r3, #20]
 282:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 364              		.loc 1 282 26
 365 002a 094B     		ldr	r3, .L17
 366 002c 0022     		movs	r2, #0
 367 002e 9A61     		str	r2, [r3, #24]
 283:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 368              		.loc 1 283 30
 369 0030 074B     		ldr	r3, .L17
 370 0032 0022     		movs	r2, #0
 371 0034 DA61     		str	r2, [r3, #28]
 284:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 372              		.loc 1 284 28
 373 0036 064B     		ldr	r3, .L17
 374 0038 0022     		movs	r2, #0
 375 003a 1A62     		str	r2, [r3, #32]
 285:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 376              		.loc 1 285 7
 377 003c 0448     		ldr	r0, .L17
 378 003e FFF7FEFF 		bl	HAL_I2C_Init
 379 0042 0346     		mov	r3, r0
 380              		.loc 1 285 6
 381 0044 002B     		cmp	r3, #0
 382 0046 01D0     		beq	.L16
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     Error_Handler();
 383              		.loc 1 287 5
 384 0048 FFF7FEFF 		bl	Error_Handler
 385              	.L16:
 288:Core/Src/main.c ****   }
 289:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 290:Core/Src/main.c **** 
 291:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 292:Core/Src/main.c **** 
 293:Core/Src/main.c **** }
 386              		.loc 1 293 1
 387 004c 00BF     		nop
 388 004e 80BD     		pop	{r7, pc}
 389              	.L18:
 390              		.align	2
 391              	.L17:
 392 0050 00000000 		.word	hi2c1
 393 0054 00540040 		.word	1073763328
 394 0058 A0860100 		.word	100000
 395              		.cfi_endproc
 396              	.LFE68:
 398              		.section	.text.MX_TIM3_Init,"ax",%progbits
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 13


 399              		.align	1
 400              		.syntax unified
 401              		.thumb
 402              		.thumb_func
 403              		.fpu softvfp
 405              	MX_TIM3_Init:
 406              	.LFB69:
 294:Core/Src/main.c **** 
 295:Core/Src/main.c **** /**
 296:Core/Src/main.c ****   * @brief TIM3 Initialization Function Timer de 1 ms
 297:Core/Src/main.c ****   * @param None
 298:Core/Src/main.c ****   * @retval None
 299:Core/Src/main.c ****   */
 300:Core/Src/main.c **** static void MX_TIM3_Init(void)
 301:Core/Src/main.c **** {
 407              		.loc 1 301 1
 408              		.cfi_startproc
 409              		@ args = 0, pretend = 0, frame = 24
 410              		@ frame_needed = 1, uses_anonymous_args = 0
 411 0000 80B5     		push	{r7, lr}
 412              	.LCFI15:
 413              		.cfi_def_cfa_offset 8
 414              		.cfi_offset 7, -8
 415              		.cfi_offset 14, -4
 416 0002 86B0     		sub	sp, sp, #24
 417              	.LCFI16:
 418              		.cfi_def_cfa_offset 32
 419 0004 00AF     		add	r7, sp, #0
 420              	.LCFI17:
 421              		.cfi_def_cfa_register 7
 302:Core/Src/main.c **** 
 303:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 306:Core/Src/main.c **** 
 307:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 422              		.loc 1 307 26
 423 0006 07F10803 		add	r3, r7, #8
 424 000a 0022     		movs	r2, #0
 425 000c 1A60     		str	r2, [r3]
 426 000e 5A60     		str	r2, [r3, #4]
 427 0010 9A60     		str	r2, [r3, #8]
 428 0012 DA60     		str	r2, [r3, #12]
 308:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 429              		.loc 1 308 27
 430 0014 3B46     		mov	r3, r7
 431 0016 0022     		movs	r2, #0
 432 0018 1A60     		str	r2, [r3]
 433 001a 5A60     		str	r2, [r3, #4]
 309:Core/Src/main.c **** 
 310:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 311:Core/Src/main.c **** 
 312:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 313:Core/Src/main.c ****   htim3.Instance = TIM3;
 434              		.loc 1 313 18
 435 001c 1D4B     		ldr	r3, .L24
 436 001e 1E4A     		ldr	r2, .L24+4
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 14


 437 0020 1A60     		str	r2, [r3]
 314:Core/Src/main.c ****   htim3.Init.Prescaler = 72-1;
 438              		.loc 1 314 24
 439 0022 1C4B     		ldr	r3, .L24
 440 0024 4722     		movs	r2, #71
 441 0026 5A60     		str	r2, [r3, #4]
 315:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 442              		.loc 1 315 26
 443 0028 1A4B     		ldr	r3, .L24
 444 002a 0022     		movs	r2, #0
 445 002c 9A60     		str	r2, [r3, #8]
 316:Core/Src/main.c ****   htim3.Init.Period = 1000;
 446              		.loc 1 316 21
 447 002e 194B     		ldr	r3, .L24
 448 0030 4FF47A72 		mov	r2, #1000
 449 0034 DA60     		str	r2, [r3, #12]
 317:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 450              		.loc 1 317 28
 451 0036 174B     		ldr	r3, .L24
 452 0038 0022     		movs	r2, #0
 453 003a 1A61     		str	r2, [r3, #16]
 318:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 454              		.loc 1 318 32
 455 003c 154B     		ldr	r3, .L24
 456 003e 0022     		movs	r2, #0
 457 0040 9A61     		str	r2, [r3, #24]
 319:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 458              		.loc 1 319 7
 459 0042 1448     		ldr	r0, .L24
 460 0044 FFF7FEFF 		bl	HAL_TIM_Base_Init
 461 0048 0346     		mov	r3, r0
 462              		.loc 1 319 6
 463 004a 002B     		cmp	r3, #0
 464 004c 01D0     		beq	.L20
 320:Core/Src/main.c ****   {
 321:Core/Src/main.c ****     Error_Handler();
 465              		.loc 1 321 5
 466 004e FFF7FEFF 		bl	Error_Handler
 467              	.L20:
 322:Core/Src/main.c ****   }
 323:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 468              		.loc 1 323 34
 469 0052 4FF48053 		mov	r3, #4096
 470 0056 BB60     		str	r3, [r7, #8]
 324:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 471              		.loc 1 324 7
 472 0058 07F10803 		add	r3, r7, #8
 473 005c 1946     		mov	r1, r3
 474 005e 0D48     		ldr	r0, .L24
 475 0060 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 476 0064 0346     		mov	r3, r0
 477              		.loc 1 324 6
 478 0066 002B     		cmp	r3, #0
 479 0068 01D0     		beq	.L21
 325:Core/Src/main.c ****   {
 326:Core/Src/main.c ****     Error_Handler();
 480              		.loc 1 326 5
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 15


 481 006a FFF7FEFF 		bl	Error_Handler
 482              	.L21:
 327:Core/Src/main.c ****   }
 328:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 483              		.loc 1 328 37
 484 006e 0023     		movs	r3, #0
 485 0070 3B60     		str	r3, [r7]
 329:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 486              		.loc 1 329 33
 487 0072 0023     		movs	r3, #0
 488 0074 7B60     		str	r3, [r7, #4]
 330:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 489              		.loc 1 330 7
 490 0076 3B46     		mov	r3, r7
 491 0078 1946     		mov	r1, r3
 492 007a 0648     		ldr	r0, .L24
 493 007c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 494 0080 0346     		mov	r3, r0
 495              		.loc 1 330 6
 496 0082 002B     		cmp	r3, #0
 497 0084 01D0     		beq	.L23
 331:Core/Src/main.c ****   {
 332:Core/Src/main.c ****     Error_Handler();
 498              		.loc 1 332 5
 499 0086 FFF7FEFF 		bl	Error_Handler
 500              	.L23:
 333:Core/Src/main.c ****   }
 334:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 335:Core/Src/main.c **** 
 336:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 337:Core/Src/main.c **** 
 338:Core/Src/main.c **** }
 501              		.loc 1 338 1
 502 008a 00BF     		nop
 503 008c 1837     		adds	r7, r7, #24
 504              	.LCFI18:
 505              		.cfi_def_cfa_offset 8
 506 008e BD46     		mov	sp, r7
 507              	.LCFI19:
 508              		.cfi_def_cfa_register 13
 509              		@ sp needed
 510 0090 80BD     		pop	{r7, pc}
 511              	.L25:
 512 0092 00BF     		.align	2
 513              	.L24:
 514 0094 00000000 		.word	htim3
 515 0098 00040040 		.word	1073742848
 516              		.cfi_endproc
 517              	.LFE69:
 519              		.section	.text.MX_TIM4_Init,"ax",%progbits
 520              		.align	1
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu softvfp
 526              	MX_TIM4_Init:
 527              	.LFB70:
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 16


 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /**
 341:Core/Src/main.c ****   * @brief TIM4 Initialization Function
 342:Core/Src/main.c ****   * @param None
 343:Core/Src/main.c ****   * @retval None
 344:Core/Src/main.c ****   */
 345:Core/Src/main.c **** static void MX_TIM4_Init(void)
 346:Core/Src/main.c **** {
 528              		.loc 1 346 1
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 24
 531              		@ frame_needed = 1, uses_anonymous_args = 0
 532 0000 80B5     		push	{r7, lr}
 533              	.LCFI20:
 534              		.cfi_def_cfa_offset 8
 535              		.cfi_offset 7, -8
 536              		.cfi_offset 14, -4
 537 0002 86B0     		sub	sp, sp, #24
 538              	.LCFI21:
 539              		.cfi_def_cfa_offset 32
 540 0004 00AF     		add	r7, sp, #0
 541              	.LCFI22:
 542              		.cfi_def_cfa_register 7
 347:Core/Src/main.c **** 
 348:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 0 */
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****   /* USER CODE END TIM4_Init 0 */
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 543              		.loc 1 352 26
 544 0006 07F10803 		add	r3, r7, #8
 545 000a 0022     		movs	r2, #0
 546 000c 1A60     		str	r2, [r3]
 547 000e 5A60     		str	r2, [r3, #4]
 548 0010 9A60     		str	r2, [r3, #8]
 549 0012 DA60     		str	r2, [r3, #12]
 353:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 550              		.loc 1 353 27
 551 0014 3B46     		mov	r3, r7
 552 0016 0022     		movs	r2, #0
 553 0018 1A60     		str	r2, [r3]
 554 001a 5A60     		str	r2, [r3, #4]
 354:Core/Src/main.c **** 
 355:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 1 */
 356:Core/Src/main.c **** 
 357:Core/Src/main.c ****   /* USER CODE END TIM4_Init 1 */
 358:Core/Src/main.c ****   htim4.Instance = TIM4;
 555              		.loc 1 358 18
 556 001c 1D4B     		ldr	r3, .L31
 557 001e 1E4A     		ldr	r2, .L31+4
 558 0020 1A60     		str	r2, [r3]
 359:Core/Src/main.c ****   htim4.Init.Prescaler = 7200-1;
 559              		.loc 1 359 24
 560 0022 1C4B     		ldr	r3, .L31
 561 0024 41F61F42 		movw	r2, #7199
 562 0028 5A60     		str	r2, [r3, #4]
 360:Core/Src/main.c ****   htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 17


 563              		.loc 1 360 26
 564 002a 1A4B     		ldr	r3, .L31
 565 002c 0022     		movs	r2, #0
 566 002e 9A60     		str	r2, [r3, #8]
 361:Core/Src/main.c ****   htim4.Init.Period = 10000;
 567              		.loc 1 361 21
 568 0030 184B     		ldr	r3, .L31
 569 0032 42F21072 		movw	r2, #10000
 570 0036 DA60     		str	r2, [r3, #12]
 362:Core/Src/main.c ****   htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 571              		.loc 1 362 28
 572 0038 164B     		ldr	r3, .L31
 573 003a 0022     		movs	r2, #0
 574 003c 1A61     		str	r2, [r3, #16]
 363:Core/Src/main.c ****   htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 575              		.loc 1 363 32
 576 003e 154B     		ldr	r3, .L31
 577 0040 0022     		movs	r2, #0
 578 0042 9A61     		str	r2, [r3, #24]
 364:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 579              		.loc 1 364 7
 580 0044 1348     		ldr	r0, .L31
 581 0046 FFF7FEFF 		bl	HAL_TIM_Base_Init
 582 004a 0346     		mov	r3, r0
 583              		.loc 1 364 6
 584 004c 002B     		cmp	r3, #0
 585 004e 01D0     		beq	.L27
 365:Core/Src/main.c ****   {
 366:Core/Src/main.c ****     Error_Handler();
 586              		.loc 1 366 5
 587 0050 FFF7FEFF 		bl	Error_Handler
 588              	.L27:
 367:Core/Src/main.c ****   }
 368:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 589              		.loc 1 368 34
 590 0054 4FF48053 		mov	r3, #4096
 591 0058 BB60     		str	r3, [r7, #8]
 369:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 592              		.loc 1 369 7
 593 005a 07F10803 		add	r3, r7, #8
 594 005e 1946     		mov	r1, r3
 595 0060 0C48     		ldr	r0, .L31
 596 0062 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 597 0066 0346     		mov	r3, r0
 598              		.loc 1 369 6
 599 0068 002B     		cmp	r3, #0
 600 006a 01D0     		beq	.L28
 370:Core/Src/main.c ****   {
 371:Core/Src/main.c ****     Error_Handler();
 601              		.loc 1 371 5
 602 006c FFF7FEFF 		bl	Error_Handler
 603              	.L28:
 372:Core/Src/main.c ****   }
 373:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 604              		.loc 1 373 37
 605 0070 0023     		movs	r3, #0
 606 0072 3B60     		str	r3, [r7]
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 18


 374:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 607              		.loc 1 374 33
 608 0074 0023     		movs	r3, #0
 609 0076 7B60     		str	r3, [r7, #4]
 375:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 610              		.loc 1 375 7
 611 0078 3B46     		mov	r3, r7
 612 007a 1946     		mov	r1, r3
 613 007c 0548     		ldr	r0, .L31
 614 007e FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 615 0082 0346     		mov	r3, r0
 616              		.loc 1 375 6
 617 0084 002B     		cmp	r3, #0
 618 0086 01D0     		beq	.L30
 376:Core/Src/main.c ****   {
 377:Core/Src/main.c ****     Error_Handler();
 619              		.loc 1 377 5
 620 0088 FFF7FEFF 		bl	Error_Handler
 621              	.L30:
 378:Core/Src/main.c ****   }
 379:Core/Src/main.c ****   /* USER CODE BEGIN TIM4_Init 2 */
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****   /* USER CODE END TIM4_Init 2 */
 382:Core/Src/main.c **** 
 383:Core/Src/main.c **** }
 622              		.loc 1 383 1
 623 008c 00BF     		nop
 624 008e 1837     		adds	r7, r7, #24
 625              	.LCFI23:
 626              		.cfi_def_cfa_offset 8
 627 0090 BD46     		mov	sp, r7
 628              	.LCFI24:
 629              		.cfi_def_cfa_register 13
 630              		@ sp needed
 631 0092 80BD     		pop	{r7, pc}
 632              	.L32:
 633              		.align	2
 634              	.L31:
 635 0094 00000000 		.word	htim4
 636 0098 00080040 		.word	1073743872
 637              		.cfi_endproc
 638              	.LFE70:
 640              		.section	.text.MX_GPIO_Init,"ax",%progbits
 641              		.align	1
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu softvfp
 647              	MX_GPIO_Init:
 648              	.LFB71:
 384:Core/Src/main.c **** 
 385:Core/Src/main.c **** /**
 386:Core/Src/main.c ****   * @brief GPIO Initialization Function
 387:Core/Src/main.c ****   * @param None
 388:Core/Src/main.c ****   * @retval None
 389:Core/Src/main.c ****   */
 390:Core/Src/main.c **** static void MX_GPIO_Init(void)
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 19


 391:Core/Src/main.c **** {
 649              		.loc 1 391 1
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 32
 652              		@ frame_needed = 1, uses_anonymous_args = 0
 653 0000 80B5     		push	{r7, lr}
 654              	.LCFI25:
 655              		.cfi_def_cfa_offset 8
 656              		.cfi_offset 7, -8
 657              		.cfi_offset 14, -4
 658 0002 88B0     		sub	sp, sp, #32
 659              	.LCFI26:
 660              		.cfi_def_cfa_offset 40
 661 0004 00AF     		add	r7, sp, #0
 662              	.LCFI27:
 663              		.cfi_def_cfa_register 7
 392:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 664              		.loc 1 392 20
 665 0006 07F11003 		add	r3, r7, #16
 666 000a 0022     		movs	r2, #0
 667 000c 1A60     		str	r2, [r3]
 668 000e 5A60     		str	r2, [r3, #4]
 669 0010 9A60     		str	r2, [r3, #8]
 670 0012 DA60     		str	r2, [r3, #12]
 671              	.LBB4:
 393:Core/Src/main.c **** 
 394:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 395:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 672              		.loc 1 395 3
 673 0014 3A4B     		ldr	r3, .L34
 674 0016 9B69     		ldr	r3, [r3, #24]
 675 0018 394A     		ldr	r2, .L34
 676 001a 43F01003 		orr	r3, r3, #16
 677 001e 9361     		str	r3, [r2, #24]
 678 0020 374B     		ldr	r3, .L34
 679 0022 9B69     		ldr	r3, [r3, #24]
 680 0024 03F01003 		and	r3, r3, #16
 681 0028 FB60     		str	r3, [r7, #12]
 682 002a FB68     		ldr	r3, [r7, #12]
 683              	.LBE4:
 684              	.LBB5:
 396:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 685              		.loc 1 396 3
 686 002c 344B     		ldr	r3, .L34
 687 002e 9B69     		ldr	r3, [r3, #24]
 688 0030 334A     		ldr	r2, .L34
 689 0032 43F02003 		orr	r3, r3, #32
 690 0036 9361     		str	r3, [r2, #24]
 691 0038 314B     		ldr	r3, .L34
 692 003a 9B69     		ldr	r3, [r3, #24]
 693 003c 03F02003 		and	r3, r3, #32
 694 0040 BB60     		str	r3, [r7, #8]
 695 0042 BB68     		ldr	r3, [r7, #8]
 696              	.LBE5:
 697              	.LBB6:
 397:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 698              		.loc 1 397 3
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 20


 699 0044 2E4B     		ldr	r3, .L34
 700 0046 9B69     		ldr	r3, [r3, #24]
 701 0048 2D4A     		ldr	r2, .L34
 702 004a 43F00403 		orr	r3, r3, #4
 703 004e 9361     		str	r3, [r2, #24]
 704 0050 2B4B     		ldr	r3, .L34
 705 0052 9B69     		ldr	r3, [r3, #24]
 706 0054 03F00403 		and	r3, r3, #4
 707 0058 7B60     		str	r3, [r7, #4]
 708 005a 7B68     		ldr	r3, [r7, #4]
 709              	.LBE6:
 710              	.LBB7:
 398:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 711              		.loc 1 398 3
 712 005c 284B     		ldr	r3, .L34
 713 005e 9B69     		ldr	r3, [r3, #24]
 714 0060 274A     		ldr	r2, .L34
 715 0062 43F00803 		orr	r3, r3, #8
 716 0066 9361     		str	r3, [r2, #24]
 717 0068 254B     		ldr	r3, .L34
 718 006a 9B69     		ldr	r3, [r3, #24]
 719 006c 03F00803 		and	r3, r3, #8
 720 0070 3B60     		str	r3, [r7]
 721 0072 3B68     		ldr	r3, [r7]
 722              	.LBE7:
 399:Core/Src/main.c **** 
 400:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 401:Core/Src/main.c ****   HAL_GPIO_WritePin(LEDc13_GPIO_Port, LEDc13_Pin, GPIO_PIN_RESET);
 723              		.loc 1 401 3
 724 0074 0022     		movs	r2, #0
 725 0076 4FF40051 		mov	r1, #8192
 726 007a 2248     		ldr	r0, .L34+4
 727 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 402:Core/Src/main.c **** 
 403:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 404:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin|MotorDIR_Pin, GPIO_PIN_RESET);
 728              		.loc 1 404 3
 729 0080 0022     		movs	r2, #0
 730 0082 1821     		movs	r1, #24
 731 0084 2048     		ldr	r0, .L34+8
 732 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   /*Configure GPIO pin : LEDc13_Pin */
 407:Core/Src/main.c ****   GPIO_InitStruct.Pin = LEDc13_Pin;
 733              		.loc 1 407 23
 734 008a 4FF40053 		mov	r3, #8192
 735 008e 3B61     		str	r3, [r7, #16]
 408:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 736              		.loc 1 408 24
 737 0090 0123     		movs	r3, #1
 738 0092 7B61     		str	r3, [r7, #20]
 409:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 739              		.loc 1 409 24
 740 0094 0023     		movs	r3, #0
 741 0096 BB61     		str	r3, [r7, #24]
 410:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 742              		.loc 1 410 25
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 21


 743 0098 0223     		movs	r3, #2
 744 009a FB61     		str	r3, [r7, #28]
 411:Core/Src/main.c ****   HAL_GPIO_Init(LEDc13_GPIO_Port, &GPIO_InitStruct);
 745              		.loc 1 411 3
 746 009c 07F11003 		add	r3, r7, #16
 747 00a0 1946     		mov	r1, r3
 748 00a2 1848     		ldr	r0, .L34+4
 749 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 412:Core/Src/main.c **** 
 413:Core/Src/main.c ****   /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
 414:Core/Src/main.c ****   GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 750              		.loc 1 414 23
 751 00a8 C023     		movs	r3, #192
 752 00aa 3B61     		str	r3, [r7, #16]
 415:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 753              		.loc 1 415 24
 754 00ac 0023     		movs	r3, #0
 755 00ae 7B61     		str	r3, [r7, #20]
 416:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 756              		.loc 1 416 24
 757 00b0 0023     		movs	r3, #0
 758 00b2 BB61     		str	r3, [r7, #24]
 417:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 759              		.loc 1 417 3
 760 00b4 07F11003 		add	r3, r7, #16
 761 00b8 1946     		mov	r1, r3
 762 00ba 1448     		ldr	r0, .L34+12
 763 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 418:Core/Src/main.c **** 
 419:Core/Src/main.c ****   /*Configure GPIO pin : ButtonClick_Pin */
 420:Core/Src/main.c ****   GPIO_InitStruct.Pin = ButtonClick_Pin;
 764              		.loc 1 420 23
 765 00c0 4FF48063 		mov	r3, #1024
 766 00c4 3B61     		str	r3, [r7, #16]
 421:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 767              		.loc 1 421 24
 768 00c6 0023     		movs	r3, #0
 769 00c8 7B61     		str	r3, [r7, #20]
 422:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 770              		.loc 1 422 24
 771 00ca 0023     		movs	r3, #0
 772 00cc BB61     		str	r3, [r7, #24]
 423:Core/Src/main.c ****   HAL_GPIO_Init(ButtonClick_GPIO_Port, &GPIO_InitStruct);
 773              		.loc 1 423 3
 774 00ce 07F11003 		add	r3, r7, #16
 775 00d2 1946     		mov	r1, r3
 776 00d4 0C48     		ldr	r0, .L34+8
 777 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 424:Core/Src/main.c **** 
 425:Core/Src/main.c ****   /*Configure GPIO pins : MotorSTEP_Pin MotorDIR_Pin */
 426:Core/Src/main.c ****   GPIO_InitStruct.Pin = MotorSTEP_Pin|MotorDIR_Pin;
 778              		.loc 1 426 23
 779 00da 1823     		movs	r3, #24
 780 00dc 3B61     		str	r3, [r7, #16]
 427:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 781              		.loc 1 427 24
 782 00de 0123     		movs	r3, #1
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 22


 783 00e0 7B61     		str	r3, [r7, #20]
 428:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 784              		.loc 1 428 24
 785 00e2 0023     		movs	r3, #0
 786 00e4 BB61     		str	r3, [r7, #24]
 429:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 787              		.loc 1 429 25
 788 00e6 0223     		movs	r3, #2
 789 00e8 FB61     		str	r3, [r7, #28]
 430:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 790              		.loc 1 430 3
 791 00ea 07F11003 		add	r3, r7, #16
 792 00ee 1946     		mov	r1, r3
 793 00f0 0548     		ldr	r0, .L34+8
 794 00f2 FFF7FEFF 		bl	HAL_GPIO_Init
 431:Core/Src/main.c **** 
 432:Core/Src/main.c **** }
 795              		.loc 1 432 1
 796 00f6 00BF     		nop
 797 00f8 2037     		adds	r7, r7, #32
 798              	.LCFI28:
 799              		.cfi_def_cfa_offset 8
 800 00fa BD46     		mov	sp, r7
 801              	.LCFI29:
 802              		.cfi_def_cfa_register 13
 803              		@ sp needed
 804 00fc 80BD     		pop	{r7, pc}
 805              	.L35:
 806 00fe 00BF     		.align	2
 807              	.L34:
 808 0100 00100240 		.word	1073876992
 809 0104 00100140 		.word	1073811456
 810 0108 000C0140 		.word	1073810432
 811 010c 00080140 		.word	1073809408
 812              		.cfi_endproc
 813              	.LFE71:
 815              		.section	.text.Error_Handler,"ax",%progbits
 816              		.align	1
 817              		.global	Error_Handler
 818              		.syntax unified
 819              		.thumb
 820              		.thumb_func
 821              		.fpu softvfp
 823              	Error_Handler:
 824              	.LFB72:
 433:Core/Src/main.c **** 
 434:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 435:Core/Src/main.c **** 
 436:Core/Src/main.c **** /* USER CODE END 4 */
 437:Core/Src/main.c **** 
 438:Core/Src/main.c **** /**
 439:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 440:Core/Src/main.c ****   * @retval None
 441:Core/Src/main.c ****   */
 442:Core/Src/main.c **** void Error_Handler(void)
 443:Core/Src/main.c **** {
 825              		.loc 1 443 1
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 23


 826              		.cfi_startproc
 827              		@ args = 0, pretend = 0, frame = 0
 828              		@ frame_needed = 1, uses_anonymous_args = 0
 829              		@ link register save eliminated.
 830 0000 80B4     		push	{r7}
 831              	.LCFI30:
 832              		.cfi_def_cfa_offset 4
 833              		.cfi_offset 7, -4
 834 0002 00AF     		add	r7, sp, #0
 835              	.LCFI31:
 836              		.cfi_def_cfa_register 7
 837              	.LBB8:
 838              	.LBB9:
 839              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 24


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 25


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 840              		.loc 2 142 3
 841              		.syntax unified
 842              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 843 0004 72B6     		cpsid i
 844              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 845              		.loc 2 143 1
 846              		.thumb
 847              		.syntax unified
 848 0006 00BF     		nop
 849              	.L37:
 850              	.LBE9:
 851              	.LBE8:
 444:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 445:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 26


 446:Core/Src/main.c ****   __disable_irq();
 447:Core/Src/main.c ****   while (1)
 852              		.loc 1 447 9 discriminator 1
 853 0008 FEE7     		b	.L37
 854              		.cfi_endproc
 855              	.LFE72:
 857              		.text
 858              	.Letext0:
 859              		.file 3 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\
 860              		.file 4 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_std
 861              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 862              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 863              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 864              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 865              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 866              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 867              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 868              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:20     .bss.hi2c1:00000000 hi2c1
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:17     .bss.hi2c1:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:27     .bss.htim3:00000000 htim3
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:24     .bss.htim3:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:34     .bss.htim4:00000000 htim4
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:31     .bss.htim4:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:40     .bss.aLastState:00000000 aLastState
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:41     .bss.aLastState:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:46     .bss.aState:00000000 aState
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:47     .bss.aState:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:53     .bss.counter:00000000 counter
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:50     .bss.counter:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:60     .bss.iStep:00000000 iStep
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:57     .bss.iStep:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:63     .text.HAL_TIM_PeriodElapsedCallback:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:71     .text.HAL_TIM_PeriodElapsedCallback:00000000 HAL_TIM_PeriodElapsedCallback
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:108    .text.HAL_TIM_PeriodElapsedCallback:0000001c $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:113    .text.main:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:120    .text.main:00000000 main
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:216    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:647    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:326    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:526    .text.MX_TIM4_Init:00000000 MX_TIM4_Init
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:405    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:201    .text.main:00000074 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:209    .text.SystemClock_Config:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:823    .text.Error_Handler:00000000 Error_Handler
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:320    .text.MX_I2C1_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:392    .text.MX_I2C1_Init:00000050 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:399    .text.MX_TIM3_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:514    .text.MX_TIM3_Init:00000094 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:520    .text.MX_TIM4_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:635    .text.MX_TIM4_Init:00000094 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:641    .text.MX_GPIO_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:808    .text.MX_GPIO_Init:00000100 $d
C:\Users\danie\AppData\Local\Temp\cc3mmpM8.s:816    .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_Init
HAL_TIM_Base_Start_IT
HAL_Delay
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_GPIO_Init
