ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	hi2c1
  16              		.section	.bss.hi2c1,"aw",%nobits
  17              		.align	2
  20              	hi2c1:
  21 0000 00000000 		.space	84
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	htim1
  23              		.section	.bss.htim1,"aw",%nobits
  24              		.align	2
  27              	htim1:
  28 0000 00000000 		.space	72
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.global	aLastState
  30              		.section	.bss.aLastState,"aw",%nobits
  33              	aLastState:
  34 0000 00       		.space	1
  35              		.global	aState
  36              		.section	.bss.aState,"aw",%nobits
  39              	aState:
  40 0000 00       		.space	1
  41              		.global	counter
  42              		.section	.bss.counter,"aw",%nobits
  43              		.align	2
  46              	counter:
  47 0000 00000000 		.space	4
  48              		.global	iStep
  49              		.section	.bss.iStep,"aw",%nobits
  50              		.align	2
  53              	iStep:
  54 0000 00000000 		.space	4
  55              		.section	.text.delayMicro,"ax",%progbits
  56              		.align	1
  57              		.global	delayMicro
  58              		.arch armv7-m
  59              		.syntax unified
  60              		.thumb
  61              		.thumb_func
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 2


  62              		.fpu softvfp
  64              	delayMicro:
  65              	.LFB65:
  66              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** // Button
  26:Core/Src/main.c **** #include "stdbool.h"
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** // OLED
  29:Core/Src/main.c **** #include "fonts.h"
  30:Core/Src/main.c **** #include "ssd1306.h"
  31:Core/Src/main.c **** /* USER CODE END Includes */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* USER CODE END PTD */
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.c **** /* USER CODE BEGIN PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** // StepperMotor
  42:Core/Src/main.c **** #define stepsperrev 4096
  43:Core/Src/main.c **** /* USER CODE END PD */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  46:Core/Src/main.c **** /* USER CODE BEGIN PM */
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE END PM */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  51:Core/Src/main.c **** I2C_HandleTypeDef hi2c1;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** TIM_HandleTypeDef htim1;
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 3


  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** /* USER CODE BEGIN PV */
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** // RotButton
  58:Core/Src/main.c **** GPIO_PinState aLastState;
  59:Core/Src/main.c **** GPIO_PinState aState;
  60:Core/Src/main.c **** uint32_t counter;
  61:Core/Src/main.c **** 
  62:Core/Src/main.c **** // StepperMotor
  63:Core/Src/main.c **** uint32_t iStep;
  64:Core/Src/main.c **** /* USER CODE END PV */
  65:Core/Src/main.c **** 
  66:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  67:Core/Src/main.c **** void SystemClock_Config(void);
  68:Core/Src/main.c **** static void MX_GPIO_Init(void);
  69:Core/Src/main.c **** static void MX_I2C1_Init(void);
  70:Core/Src/main.c **** static void MX_TIM1_Init(void);
  71:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  72:Core/Src/main.c **** 
  73:Core/Src/main.c **** // StepperMotor
  74:Core/Src/main.c **** void delayMicro (uint16_t us)
  75:Core/Src/main.c **** {
  67              		.loc 1 75 1
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 8
  70              		@ frame_needed = 1, uses_anonymous_args = 0
  71              		@ link register save eliminated.
  72 0000 80B4     		push	{r7}
  73              	.LCFI0:
  74              		.cfi_def_cfa_offset 4
  75              		.cfi_offset 7, -4
  76 0002 83B0     		sub	sp, sp, #12
  77              	.LCFI1:
  78              		.cfi_def_cfa_offset 16
  79 0004 00AF     		add	r7, sp, #0
  80              	.LCFI2:
  81              		.cfi_def_cfa_register 7
  82 0006 0346     		mov	r3, r0
  83 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  76:Core/Src/main.c ****   __HAL_TIM_SET_COUNTER(&htim1, 0);
  84              		.loc 1 76 3
  85 000a 084B     		ldr	r3, .L3
  86 000c 1B68     		ldr	r3, [r3]
  87 000e 0022     		movs	r2, #0
  88 0010 5A62     		str	r2, [r3, #36]
  77:Core/Src/main.c ****   while (__HAL_TIM_GET_COUNTER(&htim1) < us);
  89              		.loc 1 77 9
  90 0012 00BF     		nop
  91              	.L2:
  92              		.loc 1 77 10 discriminator 1
  93 0014 054B     		ldr	r3, .L3
  94 0016 1B68     		ldr	r3, [r3]
  95 0018 5A6A     		ldr	r2, [r3, #36]
  96              		.loc 1 77 40 discriminator 1
  97 001a FB88     		ldrh	r3, [r7, #6]
  98              		.loc 1 77 9 discriminator 1
  99 001c 9A42     		cmp	r2, r3
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 4


 100 001e F9D3     		bcc	.L2
  78:Core/Src/main.c **** }
 101              		.loc 1 78 1
 102 0020 00BF     		nop
 103 0022 00BF     		nop
 104 0024 0C37     		adds	r7, r7, #12
 105              	.LCFI3:
 106              		.cfi_def_cfa_offset 4
 107 0026 BD46     		mov	sp, r7
 108              	.LCFI4:
 109              		.cfi_def_cfa_register 13
 110              		@ sp needed
 111 0028 80BC     		pop	{r7}
 112              	.LCFI5:
 113              		.cfi_restore 7
 114              		.cfi_def_cfa_offset 0
 115 002a 7047     		bx	lr
 116              	.L4:
 117              		.align	2
 118              	.L3:
 119 002c 00000000 		.word	htim1
 120              		.cfi_endproc
 121              	.LFE65:
 123              		.section	.text.stepper_set_rpm,"ax",%progbits
 124              		.align	1
 125              		.global	stepper_set_rpm
 126              		.syntax unified
 127              		.thumb
 128              		.thumb_func
 129              		.fpu softvfp
 131              	stepper_set_rpm:
 132              	.LFB66:
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** void stepper_set_rpm (int rpm)  // Set rpm--> max 13, min 1,,,  went to 14 rev/min
  81:Core/Src/main.c **** {
 133              		.loc 1 81 1
 134              		.cfi_startproc
 135              		@ args = 0, pretend = 0, frame = 8
 136              		@ frame_needed = 1, uses_anonymous_args = 0
 137 0000 80B5     		push	{r7, lr}
 138              	.LCFI6:
 139              		.cfi_def_cfa_offset 8
 140              		.cfi_offset 7, -8
 141              		.cfi_offset 14, -4
 142 0002 82B0     		sub	sp, sp, #8
 143              	.LCFI7:
 144              		.cfi_def_cfa_offset 16
 145 0004 00AF     		add	r7, sp, #0
 146              	.LCFI8:
 147              		.cfi_def_cfa_register 7
 148 0006 7860     		str	r0, [r7, #4]
  82:Core/Src/main.c **** 	delayMicro(60000000/stepsperrev/rpm);
 149              		.loc 1 82 33
 150 0008 43F63812 		movw	r2, #14648
 151 000c 7B68     		ldr	r3, [r7, #4]
 152 000e 92FBF3F3 		sdiv	r3, r2, r3
 153              		.loc 1 82 2
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 5


 154 0012 9BB2     		uxth	r3, r3
 155 0014 1846     		mov	r0, r3
 156 0016 FFF7FEFF 		bl	delayMicro
  83:Core/Src/main.c **** }
 157              		.loc 1 83 1
 158 001a 00BF     		nop
 159 001c 0837     		adds	r7, r7, #8
 160              	.LCFI9:
 161              		.cfi_def_cfa_offset 8
 162 001e BD46     		mov	sp, r7
 163              	.LCFI10:
 164              		.cfi_def_cfa_register 13
 165              		@ sp needed
 166 0020 80BD     		pop	{r7, pc}
 167              		.cfi_endproc
 168              	.LFE66:
 170              		.section	.rodata
 171              		.align	2
 172              	.LC0:
 173 0000 54657374 		.ascii	"Testando\000"
 173      616E646F 
 173      00
 174 0009 000000   		.align	2
 175              	.LC1:
 176 000c 44697370 		.ascii	"Display\000"
 176      6C617900 
 177              		.align	2
 178              	.LC2:
 179 0014 436F6E74 		.ascii	"Contador\000"
 179      61646F72 
 179      00
 180              		.section	.text.main,"ax",%progbits
 181              		.align	1
 182              		.global	main
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	main:
 189              	.LFB67:
  84:Core/Src/main.c **** /* USER CODE END PFP */
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  87:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  88:Core/Src/main.c **** 
  89:Core/Src/main.c **** /* USER CODE END 0 */
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** /**
  92:Core/Src/main.c ****   * @brief  The application entry point.
  93:Core/Src/main.c ****   * @retval int
  94:Core/Src/main.c ****   */
  95:Core/Src/main.c **** int main(void)
  96:Core/Src/main.c **** {
 190              		.loc 1 96 1
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 6


 194 0000 80B5     		push	{r7, lr}
 195              	.LCFI11:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 82B0     		sub	sp, sp, #8
 200              	.LCFI12:
 201              		.cfi_def_cfa_offset 16
 202 0004 00AF     		add	r7, sp, #0
 203              	.LCFI13:
 204              		.cfi_def_cfa_register 7
  97:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  98:Core/Src/main.c ****   uint32_t i;
  99:Core/Src/main.c ****   /* USER CODE END 1 */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 104:Core/Src/main.c ****   HAL_Init();
 205              		.loc 1 104 3
 206 0006 FFF7FEFF 		bl	HAL_Init
 105:Core/Src/main.c **** 
 106:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE END Init */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* Configure the system clock */
 111:Core/Src/main.c ****   SystemClock_Config();
 207              		.loc 1 111 3
 208 000a FFF7FEFF 		bl	SystemClock_Config
 112:Core/Src/main.c **** 
 113:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 114:Core/Src/main.c **** 
 115:Core/Src/main.c ****   /* USER CODE END SysInit */
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* Initialize all configured peripherals */
 118:Core/Src/main.c ****   MX_GPIO_Init();
 209              		.loc 1 118 3
 210 000e FFF7FEFF 		bl	MX_GPIO_Init
 119:Core/Src/main.c ****   MX_I2C1_Init();
 211              		.loc 1 119 3
 212 0012 FFF7FEFF 		bl	MX_I2C1_Init
 120:Core/Src/main.c ****   MX_TIM1_Init();
 213              		.loc 1 120 3
 214 0016 FFF7FEFF 		bl	MX_TIM1_Init
 121:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 122:Core/Src/main.c **** 
 123:Core/Src/main.c ****   // Rot Button
 124:Core/Src/main.c ****   aLastState = HAL_GPIO_ReadPin(GPIOA,ButtonA_Pin);
 215              		.loc 1 124 16
 216 001a 8021     		movs	r1, #128
 217 001c 4548     		ldr	r0, .L12
 218 001e FFF7FEFF 		bl	HAL_GPIO_ReadPin
 219 0022 0346     		mov	r3, r0
 220 0024 1A46     		mov	r2, r3
 221              		.loc 1 124 14
 222 0026 444B     		ldr	r3, .L12+4
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 7


 223 0028 1A70     		strb	r2, [r3]
 125:Core/Src/main.c ****   counter = 0;
 224              		.loc 1 125 11
 225 002a 444B     		ldr	r3, .L12+8
 226 002c 0022     		movs	r2, #0
 227 002e 1A60     		str	r2, [r3]
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   // OLED
 128:Core/Src/main.c ****   SSD1306_Init();
 228              		.loc 1 128 3
 229 0030 FFF7FEFF 		bl	SSD1306_Init
 129:Core/Src/main.c ****   //char snum[5];
 130:Core/Src/main.c **** 
 131:Core/Src/main.c ****   SSD1306_GotoXY (0,0);
 230              		.loc 1 131 3
 231 0034 0021     		movs	r1, #0
 232 0036 0020     		movs	r0, #0
 233 0038 FFF7FEFF 		bl	SSD1306_GotoXY
 132:Core/Src/main.c ****   SSD1306_Puts ("Testando", &Font_11x18, 1);
 234              		.loc 1 132 3
 235 003c 0122     		movs	r2, #1
 236 003e 4049     		ldr	r1, .L12+12
 237 0040 4048     		ldr	r0, .L12+16
 238 0042 FFF7FEFF 		bl	SSD1306_Puts
 133:Core/Src/main.c ****   SSD1306_GotoXY (0, 30);
 239              		.loc 1 133 3
 240 0046 1E21     		movs	r1, #30
 241 0048 0020     		movs	r0, #0
 242 004a FFF7FEFF 		bl	SSD1306_GotoXY
 134:Core/Src/main.c ****   SSD1306_Puts ("Display", &Font_11x18, 1);
 243              		.loc 1 134 3
 244 004e 0122     		movs	r2, #1
 245 0050 3B49     		ldr	r1, .L12+12
 246 0052 3D48     		ldr	r0, .L12+20
 247 0054 FFF7FEFF 		bl	SSD1306_Puts
 135:Core/Src/main.c ****   SSD1306_UpdateScreen();
 248              		.loc 1 135 3
 249 0058 FFF7FEFF 		bl	SSD1306_UpdateScreen
 136:Core/Src/main.c ****   HAL_Delay (1000);
 250              		.loc 1 136 3
 251 005c 4FF47A70 		mov	r0, #1000
 252 0060 FFF7FEFF 		bl	HAL_Delay
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   SSD1306_ScrollRight(0,7);
 253              		.loc 1 138 3
 254 0064 0721     		movs	r1, #7
 255 0066 0020     		movs	r0, #0
 256 0068 FFF7FEFF 		bl	SSD1306_ScrollRight
 139:Core/Src/main.c ****   HAL_Delay(3000);
 257              		.loc 1 139 3
 258 006c 40F6B830 		movw	r0, #3000
 259 0070 FFF7FEFF 		bl	HAL_Delay
 140:Core/Src/main.c ****   SSD1306_ScrollLeft(0,7);
 260              		.loc 1 140 3
 261 0074 0721     		movs	r1, #7
 262 0076 0020     		movs	r0, #0
 263 0078 FFF7FEFF 		bl	SSD1306_ScrollLeft
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 8


 141:Core/Src/main.c ****   HAL_Delay(3000);
 264              		.loc 1 141 3
 265 007c 40F6B830 		movw	r0, #3000
 266 0080 FFF7FEFF 		bl	HAL_Delay
 142:Core/Src/main.c ****   SSD1306_Stopscroll();
 267              		.loc 1 142 3
 268 0084 FFF7FEFF 		bl	SSD1306_Stopscroll
 143:Core/Src/main.c ****   SSD1306_Clear();
 269              		.loc 1 143 3
 270 0088 FFF7FEFF 		bl	SSD1306_Clear
 144:Core/Src/main.c ****   SSD1306_GotoXY (35,0);
 271              		.loc 1 144 3
 272 008c 0021     		movs	r1, #0
 273 008e 2320     		movs	r0, #35
 274 0090 FFF7FEFF 		bl	SSD1306_GotoXY
 145:Core/Src/main.c ****   SSD1306_Puts ("Contador", &Font_11x18, 1);
 275              		.loc 1 145 3
 276 0094 0122     		movs	r2, #1
 277 0096 2A49     		ldr	r1, .L12+12
 278 0098 2C48     		ldr	r0, .L12+24
 279 009a FFF7FEFF 		bl	SSD1306_Puts
 146:Core/Src/main.c **** 
 147:Core/Src/main.c ****   // StepperMotor
 148:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, MotorDIR_Pin, 0); // Sentido Horario
 280              		.loc 1 148 3
 281 009e 0022     		movs	r2, #0
 282 00a0 1021     		movs	r1, #16
 283 00a2 2B48     		ldr	r0, .L12+28
 284 00a4 FFF7FEFF 		bl	HAL_GPIO_WritePin
 149:Core/Src/main.c ****   //HAL_GPIO_WritePin(GPIOB, MotorDIR_Pin, GPIO_PIN_RESET); // Sentido AntiHorario
 150:Core/Src/main.c ****   iStep = 0;
 285              		.loc 1 150 9
 286 00a8 2A4B     		ldr	r3, .L12+32
 287 00aa 0022     		movs	r2, #0
 288 00ac 1A60     		str	r2, [r3]
 289              	.L11:
 151:Core/Src/main.c **** 
 152:Core/Src/main.c ****   /* USER CODE END 2 */
 153:Core/Src/main.c **** 
 154:Core/Src/main.c ****   /* Infinite loop */
 155:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 156:Core/Src/main.c ****   while (1)
 157:Core/Src/main.c ****   {
 158:Core/Src/main.c ****     // Blink LED
 159:Core/Src/main.c ****     for (i = 0; i < 8; i++)
 290              		.loc 1 159 12
 291 00ae 0023     		movs	r3, #0
 292 00b0 7B60     		str	r3, [r7, #4]
 293              		.loc 1 159 5
 294 00b2 14E0     		b	.L7
 295              	.L8:
 160:Core/Src/main.c ****     {
 161:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, LEDc13_Pin, 0);
 296              		.loc 1 161 7 discriminator 3
 297 00b4 0022     		movs	r2, #0
 298 00b6 4FF40051 		mov	r1, #8192
 299 00ba 2748     		ldr	r0, .L12+36
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 9


 300 00bc FFF7FEFF 		bl	HAL_GPIO_WritePin
 162:Core/Src/main.c ****       HAL_Delay(25);
 301              		.loc 1 162 7 discriminator 3
 302 00c0 1920     		movs	r0, #25
 303 00c2 FFF7FEFF 		bl	HAL_Delay
 163:Core/Src/main.c ****       HAL_GPIO_WritePin(GPIOC, LEDc13_Pin, 1);
 304              		.loc 1 163 7 discriminator 3
 305 00c6 0122     		movs	r2, #1
 306 00c8 4FF40051 		mov	r1, #8192
 307 00cc 2248     		ldr	r0, .L12+36
 308 00ce FFF7FEFF 		bl	HAL_GPIO_WritePin
 164:Core/Src/main.c ****       HAL_Delay(50);
 309              		.loc 1 164 7 discriminator 3
 310 00d2 3220     		movs	r0, #50
 311 00d4 FFF7FEFF 		bl	HAL_Delay
 159:Core/Src/main.c ****     {
 312              		.loc 1 159 25 discriminator 3
 313 00d8 7B68     		ldr	r3, [r7, #4]
 314 00da 0133     		adds	r3, r3, #1
 315 00dc 7B60     		str	r3, [r7, #4]
 316              	.L7:
 159:Core/Src/main.c ****     {
 317              		.loc 1 159 5 discriminator 1
 318 00de 7B68     		ldr	r3, [r7, #4]
 319 00e0 072B     		cmp	r3, #7
 320 00e2 E7D9     		bls	.L8
 165:Core/Src/main.c ****     }
 166:Core/Src/main.c ****     HAL_Delay(800);
 321              		.loc 1 166 5
 322 00e4 4FF44870 		mov	r0, #800
 323 00e8 FFF7FEFF 		bl	HAL_Delay
 167:Core/Src/main.c **** 
 168:Core/Src/main.c ****     // Rot Button
 169:Core/Src/main.c ****     /*
 170:Core/Src/main.c **** 	  aState = HAL_GPIO_ReadPin(GPIOA,ButtonA_Pin);
 171:Core/Src/main.c **** 	  if (aState != aLastState){
 172:Core/Src/main.c **** 		  if (HAL_GPIO_ReadPin(GPIOA,ButtonB_Pin) != aState) {
 173:Core/Src/main.c **** 			  counter ++; // Sentido Horario
 174:Core/Src/main.c **** 		  } else{
 175:Core/Src/main.c **** 			  counter --; // Sentido Anti Horario
 176:Core/Src/main.c **** 		  }
 177:Core/Src/main.c **** 	  }
 178:Core/Src/main.c ****     */
 179:Core/Src/main.c **** 
 180:Core/Src/main.c **** 
 181:Core/Src/main.c **** 	  // OLED
 182:Core/Src/main.c ****     /*
 183:Core/Src/main.c **** 	  itoa(counter, snum, 10);
 184:Core/Src/main.c **** 	  SSD1306_Puts (snum, &Font_16x26, 1);
 185:Core/Src/main.c **** 	  SSD1306_UpdateScreen();
 186:Core/Src/main.c **** 	  HAL_Delay (500);
 187:Core/Src/main.c ****     */
 188:Core/Src/main.c **** 
 189:Core/Src/main.c **** 	  // StepperMotor
 190:Core/Src/main.c ****     HAL_Delay(1000);  // Espera um segundo
 324              		.loc 1 190 5
 325 00ec 4FF47A70 		mov	r0, #1000
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 10


 326 00f0 FFF7FEFF 		bl	HAL_Delay
 191:Core/Src/main.c **** 	  
 192:Core/Src/main.c ****     for (iStep=0; iStep < stepsperrev; iStep++){
 327              		.loc 1 192 15
 328 00f4 174B     		ldr	r3, .L12+32
 329 00f6 0022     		movs	r2, #0
 330 00f8 1A60     		str	r2, [r3]
 331              		.loc 1 192 5
 332 00fa 14E0     		b	.L9
 333              	.L10:
 193:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 1);
 334              		.loc 1 193 5 discriminator 3
 335 00fc 0122     		movs	r2, #1
 336 00fe 0821     		movs	r1, #8
 337 0100 1348     		ldr	r0, .L12+28
 338 0102 FFF7FEFF 		bl	HAL_GPIO_WritePin
 194:Core/Src/main.c **** 		  HAL_Delay(1);
 339              		.loc 1 194 5 discriminator 3
 340 0106 0120     		movs	r0, #1
 341 0108 FFF7FEFF 		bl	HAL_Delay
 195:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 0);
 342              		.loc 1 195 5 discriminator 3
 343 010c 0022     		movs	r2, #0
 344 010e 0821     		movs	r1, #8
 345 0110 0F48     		ldr	r0, .L12+28
 346 0112 FFF7FEFF 		bl	HAL_GPIO_WritePin
 196:Core/Src/main.c **** 		  HAL_Delay(1);
 347              		.loc 1 196 5 discriminator 3
 348 0116 0120     		movs	r0, #1
 349 0118 FFF7FEFF 		bl	HAL_Delay
 192:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 1);
 350              		.loc 1 192 45 discriminator 3
 351 011c 0D4B     		ldr	r3, .L12+32
 352 011e 1B68     		ldr	r3, [r3]
 353 0120 0133     		adds	r3, r3, #1
 354 0122 0C4A     		ldr	r2, .L12+32
 355 0124 1360     		str	r3, [r2]
 356              	.L9:
 192:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 1);
 357              		.loc 1 192 25 discriminator 1
 358 0126 0B4B     		ldr	r3, .L12+32
 359 0128 1B68     		ldr	r3, [r3]
 192:Core/Src/main.c **** 		  HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin, 1);
 360              		.loc 1 192 5 discriminator 1
 361 012a B3F5805F 		cmp	r3, #4096
 362 012e E5D3     		bcc	.L10
 159:Core/Src/main.c ****     {
 363              		.loc 1 159 12
 364 0130 BDE7     		b	.L11
 365              	.L13:
 366 0132 00BF     		.align	2
 367              	.L12:
 368 0134 00080140 		.word	1073809408
 369 0138 00000000 		.word	aLastState
 370 013c 00000000 		.word	counter
 371 0140 00000000 		.word	Font_11x18
 372 0144 00000000 		.word	.LC0
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 11


 373 0148 0C000000 		.word	.LC1
 374 014c 14000000 		.word	.LC2
 375 0150 000C0140 		.word	1073810432
 376 0154 00000000 		.word	iStep
 377 0158 00100140 		.word	1073811456
 378              		.cfi_endproc
 379              	.LFE67:
 381              		.section	.text.SystemClock_Config,"ax",%progbits
 382              		.align	1
 383              		.global	SystemClock_Config
 384              		.syntax unified
 385              		.thumb
 386              		.thumb_func
 387              		.fpu softvfp
 389              	SystemClock_Config:
 390              	.LFB68:
 197:Core/Src/main.c **** 	  }
 198:Core/Src/main.c ****     
 199:Core/Src/main.c ****     /* USER CODE END WHILE */
 200:Core/Src/main.c **** 
 201:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 202:Core/Src/main.c ****   }
 203:Core/Src/main.c ****   /* USER CODE END 3 */
 204:Core/Src/main.c **** }
 205:Core/Src/main.c **** 
 206:Core/Src/main.c **** /**
 207:Core/Src/main.c ****   * @brief System Clock Configuration
 208:Core/Src/main.c ****   * @retval None
 209:Core/Src/main.c ****   */
 210:Core/Src/main.c **** void SystemClock_Config(void)
 211:Core/Src/main.c **** {
 391              		.loc 1 211 1
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 64
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395 0000 80B5     		push	{r7, lr}
 396              	.LCFI14:
 397              		.cfi_def_cfa_offset 8
 398              		.cfi_offset 7, -8
 399              		.cfi_offset 14, -4
 400 0002 90B0     		sub	sp, sp, #64
 401              	.LCFI15:
 402              		.cfi_def_cfa_offset 72
 403 0004 00AF     		add	r7, sp, #0
 404              	.LCFI16:
 405              		.cfi_def_cfa_register 7
 212:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 406              		.loc 1 212 22
 407 0006 07F11803 		add	r3, r7, #24
 408 000a 2822     		movs	r2, #40
 409 000c 0021     		movs	r1, #0
 410 000e 1846     		mov	r0, r3
 411 0010 FFF7FEFF 		bl	memset
 213:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 412              		.loc 1 213 22
 413 0014 3B1D     		adds	r3, r7, #4
 414 0016 0022     		movs	r2, #0
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 12


 415 0018 1A60     		str	r2, [r3]
 416 001a 5A60     		str	r2, [r3, #4]
 417 001c 9A60     		str	r2, [r3, #8]
 418 001e DA60     		str	r2, [r3, #12]
 419 0020 1A61     		str	r2, [r3, #16]
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 216:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 217:Core/Src/main.c ****   */
 218:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 420              		.loc 1 218 36
 421 0022 0123     		movs	r3, #1
 422 0024 BB61     		str	r3, [r7, #24]
 219:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 423              		.loc 1 219 30
 424 0026 4FF48033 		mov	r3, #65536
 425 002a FB61     		str	r3, [r7, #28]
 220:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 426              		.loc 1 220 36
 427 002c 0023     		movs	r3, #0
 428 002e 3B62     		str	r3, [r7, #32]
 221:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 429              		.loc 1 221 30
 430 0030 0123     		movs	r3, #1
 431 0032 BB62     		str	r3, [r7, #40]
 222:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 432              		.loc 1 222 34
 433 0034 0223     		movs	r3, #2
 434 0036 7B63     		str	r3, [r7, #52]
 223:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 435              		.loc 1 223 35
 436 0038 4FF48033 		mov	r3, #65536
 437 003c BB63     		str	r3, [r7, #56]
 224:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 438              		.loc 1 224 32
 439 003e 4FF4E013 		mov	r3, #1835008
 440 0042 FB63     		str	r3, [r7, #60]
 225:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 441              		.loc 1 225 7
 442 0044 07F11803 		add	r3, r7, #24
 443 0048 1846     		mov	r0, r3
 444 004a FFF7FEFF 		bl	HAL_RCC_OscConfig
 445 004e 0346     		mov	r3, r0
 446              		.loc 1 225 6
 447 0050 002B     		cmp	r3, #0
 448 0052 01D0     		beq	.L15
 226:Core/Src/main.c ****   {
 227:Core/Src/main.c ****     Error_Handler();
 449              		.loc 1 227 5
 450 0054 FFF7FEFF 		bl	Error_Handler
 451              	.L15:
 228:Core/Src/main.c ****   }
 229:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 230:Core/Src/main.c ****   */
 231:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 452              		.loc 1 231 31
 453 0058 0F23     		movs	r3, #15
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 13


 454 005a 7B60     		str	r3, [r7, #4]
 232:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 233:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 455              		.loc 1 233 34
 456 005c 0223     		movs	r3, #2
 457 005e BB60     		str	r3, [r7, #8]
 234:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 458              		.loc 1 234 35
 459 0060 0023     		movs	r3, #0
 460 0062 FB60     		str	r3, [r7, #12]
 235:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 461              		.loc 1 235 36
 462 0064 4FF48063 		mov	r3, #1024
 463 0068 3B61     		str	r3, [r7, #16]
 236:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 464              		.loc 1 236 36
 465 006a 0023     		movs	r3, #0
 466 006c 7B61     		str	r3, [r7, #20]
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 467              		.loc 1 238 7
 468 006e 3B1D     		adds	r3, r7, #4
 469 0070 0221     		movs	r1, #2
 470 0072 1846     		mov	r0, r3
 471 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 472 0078 0346     		mov	r3, r0
 473              		.loc 1 238 6
 474 007a 002B     		cmp	r3, #0
 475 007c 01D0     		beq	.L17
 239:Core/Src/main.c ****   {
 240:Core/Src/main.c ****     Error_Handler();
 476              		.loc 1 240 5
 477 007e FFF7FEFF 		bl	Error_Handler
 478              	.L17:
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c **** }
 479              		.loc 1 242 1
 480 0082 00BF     		nop
 481 0084 4037     		adds	r7, r7, #64
 482              	.LCFI17:
 483              		.cfi_def_cfa_offset 8
 484 0086 BD46     		mov	sp, r7
 485              	.LCFI18:
 486              		.cfi_def_cfa_register 13
 487              		@ sp needed
 488 0088 80BD     		pop	{r7, pc}
 489              		.cfi_endproc
 490              	.LFE68:
 492              		.section	.text.MX_I2C1_Init,"ax",%progbits
 493              		.align	1
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu softvfp
 499              	MX_I2C1_Init:
 500              	.LFB69:
 243:Core/Src/main.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 14


 244:Core/Src/main.c **** /**
 245:Core/Src/main.c ****   * @brief I2C1 Initialization Function
 246:Core/Src/main.c ****   * @param None
 247:Core/Src/main.c ****   * @retval None
 248:Core/Src/main.c ****   */
 249:Core/Src/main.c **** static void MX_I2C1_Init(void)
 250:Core/Src/main.c **** {
 501              		.loc 1 250 1
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 1, uses_anonymous_args = 0
 505 0000 80B5     		push	{r7, lr}
 506              	.LCFI19:
 507              		.cfi_def_cfa_offset 8
 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0002 00AF     		add	r7, sp, #0
 511              	.LCFI20:
 512              		.cfi_def_cfa_register 7
 251:Core/Src/main.c **** 
 252:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 0 */
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   /* USER CODE END I2C1_Init 0 */
 255:Core/Src/main.c **** 
 256:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 1 */
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****   /* USER CODE END I2C1_Init 1 */
 259:Core/Src/main.c ****   hi2c1.Instance = I2C1;
 513              		.loc 1 259 18
 514 0004 124B     		ldr	r3, .L21
 515 0006 134A     		ldr	r2, .L21+4
 516 0008 1A60     		str	r2, [r3]
 260:Core/Src/main.c ****   hi2c1.Init.ClockSpeed = 100000;
 517              		.loc 1 260 25
 518 000a 114B     		ldr	r3, .L21
 519 000c 124A     		ldr	r2, .L21+8
 520 000e 5A60     		str	r2, [r3, #4]
 261:Core/Src/main.c ****   hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 521              		.loc 1 261 24
 522 0010 0F4B     		ldr	r3, .L21
 523 0012 0022     		movs	r2, #0
 524 0014 9A60     		str	r2, [r3, #8]
 262:Core/Src/main.c ****   hi2c1.Init.OwnAddress1 = 0;
 525              		.loc 1 262 26
 526 0016 0E4B     		ldr	r3, .L21
 527 0018 0022     		movs	r2, #0
 528 001a DA60     		str	r2, [r3, #12]
 263:Core/Src/main.c ****   hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 529              		.loc 1 263 29
 530 001c 0C4B     		ldr	r3, .L21
 531 001e 4FF48042 		mov	r2, #16384
 532 0022 1A61     		str	r2, [r3, #16]
 264:Core/Src/main.c ****   hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 533              		.loc 1 264 30
 534 0024 0A4B     		ldr	r3, .L21
 535 0026 0022     		movs	r2, #0
 536 0028 5A61     		str	r2, [r3, #20]
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 15


 265:Core/Src/main.c ****   hi2c1.Init.OwnAddress2 = 0;
 537              		.loc 1 265 26
 538 002a 094B     		ldr	r3, .L21
 539 002c 0022     		movs	r2, #0
 540 002e 9A61     		str	r2, [r3, #24]
 266:Core/Src/main.c ****   hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 541              		.loc 1 266 30
 542 0030 074B     		ldr	r3, .L21
 543 0032 0022     		movs	r2, #0
 544 0034 DA61     		str	r2, [r3, #28]
 267:Core/Src/main.c ****   hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 545              		.loc 1 267 28
 546 0036 064B     		ldr	r3, .L21
 547 0038 0022     		movs	r2, #0
 548 003a 1A62     		str	r2, [r3, #32]
 268:Core/Src/main.c ****   if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 549              		.loc 1 268 7
 550 003c 0448     		ldr	r0, .L21
 551 003e FFF7FEFF 		bl	HAL_I2C_Init
 552 0042 0346     		mov	r3, r0
 553              		.loc 1 268 6
 554 0044 002B     		cmp	r3, #0
 555 0046 01D0     		beq	.L20
 269:Core/Src/main.c ****   {
 270:Core/Src/main.c ****     Error_Handler();
 556              		.loc 1 270 5
 557 0048 FFF7FEFF 		bl	Error_Handler
 558              	.L20:
 271:Core/Src/main.c ****   }
 272:Core/Src/main.c ****   /* USER CODE BEGIN I2C1_Init 2 */
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****   /* USER CODE END I2C1_Init 2 */
 275:Core/Src/main.c **** 
 276:Core/Src/main.c **** }
 559              		.loc 1 276 1
 560 004c 00BF     		nop
 561 004e 80BD     		pop	{r7, pc}
 562              	.L22:
 563              		.align	2
 564              	.L21:
 565 0050 00000000 		.word	hi2c1
 566 0054 00540040 		.word	1073763328
 567 0058 A0860100 		.word	100000
 568              		.cfi_endproc
 569              	.LFE69:
 571              		.section	.text.MX_TIM1_Init,"ax",%progbits
 572              		.align	1
 573              		.syntax unified
 574              		.thumb
 575              		.thumb_func
 576              		.fpu softvfp
 578              	MX_TIM1_Init:
 579              	.LFB70:
 277:Core/Src/main.c **** 
 278:Core/Src/main.c **** /**
 279:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 280:Core/Src/main.c ****   * @param None
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 16


 281:Core/Src/main.c ****   * @retval None
 282:Core/Src/main.c ****   */
 283:Core/Src/main.c **** static void MX_TIM1_Init(void)
 284:Core/Src/main.c **** {
 580              		.loc 1 284 1
 581              		.cfi_startproc
 582              		@ args = 0, pretend = 0, frame = 24
 583              		@ frame_needed = 1, uses_anonymous_args = 0
 584 0000 80B5     		push	{r7, lr}
 585              	.LCFI21:
 586              		.cfi_def_cfa_offset 8
 587              		.cfi_offset 7, -8
 588              		.cfi_offset 14, -4
 589 0002 86B0     		sub	sp, sp, #24
 590              	.LCFI22:
 591              		.cfi_def_cfa_offset 32
 592 0004 00AF     		add	r7, sp, #0
 593              	.LCFI23:
 594              		.cfi_def_cfa_register 7
 285:Core/Src/main.c **** 
 286:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 595              		.loc 1 290 26
 596 0006 07F10803 		add	r3, r7, #8
 597 000a 0022     		movs	r2, #0
 598 000c 1A60     		str	r2, [r3]
 599 000e 5A60     		str	r2, [r3, #4]
 600 0010 9A60     		str	r2, [r3, #8]
 601 0012 DA60     		str	r2, [r3, #12]
 291:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 602              		.loc 1 291 27
 603 0014 3B46     		mov	r3, r7
 604 0016 0022     		movs	r2, #0
 605 0018 1A60     		str	r2, [r3]
 606 001a 5A60     		str	r2, [r3, #4]
 292:Core/Src/main.c **** 
 293:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 294:Core/Src/main.c **** 
 295:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 296:Core/Src/main.c ****   htim1.Instance = TIM1;
 607              		.loc 1 296 18
 608 001c 1E4B     		ldr	r3, .L28
 609 001e 1F4A     		ldr	r2, .L28+4
 610 0020 1A60     		str	r2, [r3]
 297:Core/Src/main.c ****   htim1.Init.Prescaler = 72-1;
 611              		.loc 1 297 24
 612 0022 1D4B     		ldr	r3, .L28
 613 0024 4722     		movs	r2, #71
 614 0026 5A60     		str	r2, [r3, #4]
 298:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 615              		.loc 1 298 26
 616 0028 1B4B     		ldr	r3, .L28
 617 002a 0022     		movs	r2, #0
 618 002c 9A60     		str	r2, [r3, #8]
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 17


 299:Core/Src/main.c ****   htim1.Init.Period = 0xffff-1;
 619              		.loc 1 299 21
 620 002e 1A4B     		ldr	r3, .L28
 621 0030 4FF6FE72 		movw	r2, #65534
 622 0034 DA60     		str	r2, [r3, #12]
 300:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 623              		.loc 1 300 28
 624 0036 184B     		ldr	r3, .L28
 625 0038 0022     		movs	r2, #0
 626 003a 1A61     		str	r2, [r3, #16]
 301:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 627              		.loc 1 301 32
 628 003c 164B     		ldr	r3, .L28
 629 003e 0022     		movs	r2, #0
 630 0040 5A61     		str	r2, [r3, #20]
 302:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 631              		.loc 1 302 32
 632 0042 154B     		ldr	r3, .L28
 633 0044 0022     		movs	r2, #0
 634 0046 9A61     		str	r2, [r3, #24]
 303:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 635              		.loc 1 303 7
 636 0048 1348     		ldr	r0, .L28
 637 004a FFF7FEFF 		bl	HAL_TIM_Base_Init
 638 004e 0346     		mov	r3, r0
 639              		.loc 1 303 6
 640 0050 002B     		cmp	r3, #0
 641 0052 01D0     		beq	.L24
 304:Core/Src/main.c ****   {
 305:Core/Src/main.c ****     Error_Handler();
 642              		.loc 1 305 5
 643 0054 FFF7FEFF 		bl	Error_Handler
 644              	.L24:
 306:Core/Src/main.c ****   }
 307:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 645              		.loc 1 307 34
 646 0058 4FF48053 		mov	r3, #4096
 647 005c BB60     		str	r3, [r7, #8]
 308:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 648              		.loc 1 308 7
 649 005e 07F10803 		add	r3, r7, #8
 650 0062 1946     		mov	r1, r3
 651 0064 0C48     		ldr	r0, .L28
 652 0066 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 653 006a 0346     		mov	r3, r0
 654              		.loc 1 308 6
 655 006c 002B     		cmp	r3, #0
 656 006e 01D0     		beq	.L25
 309:Core/Src/main.c ****   {
 310:Core/Src/main.c ****     Error_Handler();
 657              		.loc 1 310 5
 658 0070 FFF7FEFF 		bl	Error_Handler
 659              	.L25:
 311:Core/Src/main.c ****   }
 312:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 660              		.loc 1 312 37
 661 0074 0023     		movs	r3, #0
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 18


 662 0076 3B60     		str	r3, [r7]
 313:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 663              		.loc 1 313 33
 664 0078 0023     		movs	r3, #0
 665 007a 7B60     		str	r3, [r7, #4]
 314:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 666              		.loc 1 314 7
 667 007c 3B46     		mov	r3, r7
 668 007e 1946     		mov	r1, r3
 669 0080 0548     		ldr	r0, .L28
 670 0082 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 671 0086 0346     		mov	r3, r0
 672              		.loc 1 314 6
 673 0088 002B     		cmp	r3, #0
 674 008a 01D0     		beq	.L27
 315:Core/Src/main.c ****   {
 316:Core/Src/main.c ****     Error_Handler();
 675              		.loc 1 316 5
 676 008c FFF7FEFF 		bl	Error_Handler
 677              	.L27:
 317:Core/Src/main.c ****   }
 318:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 319:Core/Src/main.c **** 
 320:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 321:Core/Src/main.c **** 
 322:Core/Src/main.c **** }
 678              		.loc 1 322 1
 679 0090 00BF     		nop
 680 0092 1837     		adds	r7, r7, #24
 681              	.LCFI24:
 682              		.cfi_def_cfa_offset 8
 683 0094 BD46     		mov	sp, r7
 684              	.LCFI25:
 685              		.cfi_def_cfa_register 13
 686              		@ sp needed
 687 0096 80BD     		pop	{r7, pc}
 688              	.L29:
 689              		.align	2
 690              	.L28:
 691 0098 00000000 		.word	htim1
 692 009c 002C0140 		.word	1073818624
 693              		.cfi_endproc
 694              	.LFE70:
 696              		.section	.text.MX_GPIO_Init,"ax",%progbits
 697              		.align	1
 698              		.syntax unified
 699              		.thumb
 700              		.thumb_func
 701              		.fpu softvfp
 703              	MX_GPIO_Init:
 704              	.LFB71:
 323:Core/Src/main.c **** 
 324:Core/Src/main.c **** /**
 325:Core/Src/main.c ****   * @brief GPIO Initialization Function
 326:Core/Src/main.c ****   * @param None
 327:Core/Src/main.c ****   * @retval None
 328:Core/Src/main.c ****   */
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 19


 329:Core/Src/main.c **** static void MX_GPIO_Init(void)
 330:Core/Src/main.c **** {
 705              		.loc 1 330 1
 706              		.cfi_startproc
 707              		@ args = 0, pretend = 0, frame = 32
 708              		@ frame_needed = 1, uses_anonymous_args = 0
 709 0000 80B5     		push	{r7, lr}
 710              	.LCFI26:
 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 7, -8
 713              		.cfi_offset 14, -4
 714 0002 88B0     		sub	sp, sp, #32
 715              	.LCFI27:
 716              		.cfi_def_cfa_offset 40
 717 0004 00AF     		add	r7, sp, #0
 718              	.LCFI28:
 719              		.cfi_def_cfa_register 7
 331:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 720              		.loc 1 331 20
 721 0006 07F11003 		add	r3, r7, #16
 722 000a 0022     		movs	r2, #0
 723 000c 1A60     		str	r2, [r3]
 724 000e 5A60     		str	r2, [r3, #4]
 725 0010 9A60     		str	r2, [r3, #8]
 726 0012 DA60     		str	r2, [r3, #12]
 727              	.LBB4:
 332:Core/Src/main.c **** 
 333:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 334:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 728              		.loc 1 334 3
 729 0014 3A4B     		ldr	r3, .L31
 730 0016 9B69     		ldr	r3, [r3, #24]
 731 0018 394A     		ldr	r2, .L31
 732 001a 43F01003 		orr	r3, r3, #16
 733 001e 9361     		str	r3, [r2, #24]
 734 0020 374B     		ldr	r3, .L31
 735 0022 9B69     		ldr	r3, [r3, #24]
 736 0024 03F01003 		and	r3, r3, #16
 737 0028 FB60     		str	r3, [r7, #12]
 738 002a FB68     		ldr	r3, [r7, #12]
 739              	.LBE4:
 740              	.LBB5:
 335:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 741              		.loc 1 335 3
 742 002c 344B     		ldr	r3, .L31
 743 002e 9B69     		ldr	r3, [r3, #24]
 744 0030 334A     		ldr	r2, .L31
 745 0032 43F02003 		orr	r3, r3, #32
 746 0036 9361     		str	r3, [r2, #24]
 747 0038 314B     		ldr	r3, .L31
 748 003a 9B69     		ldr	r3, [r3, #24]
 749 003c 03F02003 		and	r3, r3, #32
 750 0040 BB60     		str	r3, [r7, #8]
 751 0042 BB68     		ldr	r3, [r7, #8]
 752              	.LBE5:
 753              	.LBB6:
 336:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 20


 754              		.loc 1 336 3
 755 0044 2E4B     		ldr	r3, .L31
 756 0046 9B69     		ldr	r3, [r3, #24]
 757 0048 2D4A     		ldr	r2, .L31
 758 004a 43F00403 		orr	r3, r3, #4
 759 004e 9361     		str	r3, [r2, #24]
 760 0050 2B4B     		ldr	r3, .L31
 761 0052 9B69     		ldr	r3, [r3, #24]
 762 0054 03F00403 		and	r3, r3, #4
 763 0058 7B60     		str	r3, [r7, #4]
 764 005a 7B68     		ldr	r3, [r7, #4]
 765              	.LBE6:
 766              	.LBB7:
 337:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 767              		.loc 1 337 3
 768 005c 284B     		ldr	r3, .L31
 769 005e 9B69     		ldr	r3, [r3, #24]
 770 0060 274A     		ldr	r2, .L31
 771 0062 43F00803 		orr	r3, r3, #8
 772 0066 9361     		str	r3, [r2, #24]
 773 0068 254B     		ldr	r3, .L31
 774 006a 9B69     		ldr	r3, [r3, #24]
 775 006c 03F00803 		and	r3, r3, #8
 776 0070 3B60     		str	r3, [r7]
 777 0072 3B68     		ldr	r3, [r7]
 778              	.LBE7:
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 340:Core/Src/main.c ****   HAL_GPIO_WritePin(LEDc13_GPIO_Port, LEDc13_Pin, GPIO_PIN_RESET);
 779              		.loc 1 340 3
 780 0074 0022     		movs	r2, #0
 781 0076 4FF40051 		mov	r1, #8192
 782 007a 2248     		ldr	r0, .L31+4
 783 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 341:Core/Src/main.c **** 
 342:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 343:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, MotorSTEP_Pin|MotorDIR_Pin, GPIO_PIN_RESET);
 784              		.loc 1 343 3
 785 0080 0022     		movs	r2, #0
 786 0082 1821     		movs	r1, #24
 787 0084 2048     		ldr	r0, .L31+8
 788 0086 FFF7FEFF 		bl	HAL_GPIO_WritePin
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /*Configure GPIO pin : LEDc13_Pin */
 346:Core/Src/main.c ****   GPIO_InitStruct.Pin = LEDc13_Pin;
 789              		.loc 1 346 23
 790 008a 4FF40053 		mov	r3, #8192
 791 008e 3B61     		str	r3, [r7, #16]
 347:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 792              		.loc 1 347 24
 793 0090 0123     		movs	r3, #1
 794 0092 7B61     		str	r3, [r7, #20]
 348:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 795              		.loc 1 348 24
 796 0094 0023     		movs	r3, #0
 797 0096 BB61     		str	r3, [r7, #24]
 349:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 21


 798              		.loc 1 349 25
 799 0098 0223     		movs	r3, #2
 800 009a FB61     		str	r3, [r7, #28]
 350:Core/Src/main.c ****   HAL_GPIO_Init(LEDc13_GPIO_Port, &GPIO_InitStruct);
 801              		.loc 1 350 3
 802 009c 07F11003 		add	r3, r7, #16
 803 00a0 1946     		mov	r1, r3
 804 00a2 1848     		ldr	r0, .L31+4
 805 00a4 FFF7FEFF 		bl	HAL_GPIO_Init
 351:Core/Src/main.c **** 
 352:Core/Src/main.c ****   /*Configure GPIO pins : ButtonB_Pin ButtonA_Pin */
 353:Core/Src/main.c ****   GPIO_InitStruct.Pin = ButtonB_Pin|ButtonA_Pin;
 806              		.loc 1 353 23
 807 00a8 C023     		movs	r3, #192
 808 00aa 3B61     		str	r3, [r7, #16]
 354:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 809              		.loc 1 354 24
 810 00ac 0023     		movs	r3, #0
 811 00ae 7B61     		str	r3, [r7, #20]
 355:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 812              		.loc 1 355 24
 813 00b0 0023     		movs	r3, #0
 814 00b2 BB61     		str	r3, [r7, #24]
 356:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 815              		.loc 1 356 3
 816 00b4 07F11003 		add	r3, r7, #16
 817 00b8 1946     		mov	r1, r3
 818 00ba 1448     		ldr	r0, .L31+12
 819 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 357:Core/Src/main.c **** 
 358:Core/Src/main.c ****   /*Configure GPIO pin : ButtonClick_Pin */
 359:Core/Src/main.c ****   GPIO_InitStruct.Pin = ButtonClick_Pin;
 820              		.loc 1 359 23
 821 00c0 4FF48063 		mov	r3, #1024
 822 00c4 3B61     		str	r3, [r7, #16]
 360:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 823              		.loc 1 360 24
 824 00c6 0023     		movs	r3, #0
 825 00c8 7B61     		str	r3, [r7, #20]
 361:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 826              		.loc 1 361 24
 827 00ca 0023     		movs	r3, #0
 828 00cc BB61     		str	r3, [r7, #24]
 362:Core/Src/main.c ****   HAL_GPIO_Init(ButtonClick_GPIO_Port, &GPIO_InitStruct);
 829              		.loc 1 362 3
 830 00ce 07F11003 		add	r3, r7, #16
 831 00d2 1946     		mov	r1, r3
 832 00d4 0C48     		ldr	r0, .L31+8
 833 00d6 FFF7FEFF 		bl	HAL_GPIO_Init
 363:Core/Src/main.c **** 
 364:Core/Src/main.c ****   /*Configure GPIO pins : MotorSTEP_Pin MotorDIR_Pin */
 365:Core/Src/main.c ****   GPIO_InitStruct.Pin = MotorSTEP_Pin|MotorDIR_Pin;
 834              		.loc 1 365 23
 835 00da 1823     		movs	r3, #24
 836 00dc 3B61     		str	r3, [r7, #16]
 366:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 837              		.loc 1 366 24
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 22


 838 00de 0123     		movs	r3, #1
 839 00e0 7B61     		str	r3, [r7, #20]
 367:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 840              		.loc 1 367 24
 841 00e2 0023     		movs	r3, #0
 842 00e4 BB61     		str	r3, [r7, #24]
 368:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 843              		.loc 1 368 25
 844 00e6 0223     		movs	r3, #2
 845 00e8 FB61     		str	r3, [r7, #28]
 369:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 846              		.loc 1 369 3
 847 00ea 07F11003 		add	r3, r7, #16
 848 00ee 1946     		mov	r1, r3
 849 00f0 0548     		ldr	r0, .L31+8
 850 00f2 FFF7FEFF 		bl	HAL_GPIO_Init
 370:Core/Src/main.c **** 
 371:Core/Src/main.c **** }
 851              		.loc 1 371 1
 852 00f6 00BF     		nop
 853 00f8 2037     		adds	r7, r7, #32
 854              	.LCFI29:
 855              		.cfi_def_cfa_offset 8
 856 00fa BD46     		mov	sp, r7
 857              	.LCFI30:
 858              		.cfi_def_cfa_register 13
 859              		@ sp needed
 860 00fc 80BD     		pop	{r7, pc}
 861              	.L32:
 862 00fe 00BF     		.align	2
 863              	.L31:
 864 0100 00100240 		.word	1073876992
 865 0104 00100140 		.word	1073811456
 866 0108 000C0140 		.word	1073810432
 867 010c 00080140 		.word	1073809408
 868              		.cfi_endproc
 869              	.LFE71:
 871              		.section	.text.Error_Handler,"ax",%progbits
 872              		.align	1
 873              		.global	Error_Handler
 874              		.syntax unified
 875              		.thumb
 876              		.thumb_func
 877              		.fpu softvfp
 879              	Error_Handler:
 880              	.LFB72:
 372:Core/Src/main.c **** 
 373:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 374:Core/Src/main.c **** 
 375:Core/Src/main.c **** /* USER CODE END 4 */
 376:Core/Src/main.c **** 
 377:Core/Src/main.c **** /**
 378:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 379:Core/Src/main.c ****   * @retval None
 380:Core/Src/main.c ****   */
 381:Core/Src/main.c **** void Error_Handler(void)
 382:Core/Src/main.c **** {
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 23


 881              		.loc 1 382 1
 882              		.cfi_startproc
 883              		@ args = 0, pretend = 0, frame = 0
 884              		@ frame_needed = 1, uses_anonymous_args = 0
 885              		@ link register save eliminated.
 886 0000 80B4     		push	{r7}
 887              	.LCFI31:
 888              		.cfi_def_cfa_offset 4
 889              		.cfi_offset 7, -4
 890 0002 00AF     		add	r7, sp, #0
 891              	.LCFI32:
 892              		.cfi_def_cfa_register 7
 893              	.LBB8:
 894              	.LBB9:
 895              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 24


  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 25


 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 896              		.loc 2 142 3
 897              		.syntax unified
 898              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 899 0004 72B6     		cpsid i
 900              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 901              		.loc 2 143 1
 902              		.thumb
 903              		.syntax unified
 904 0006 00BF     		nop
 905              	.L34:
 906              	.LBE9:
 907              	.LBE8:
 383:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 26


 384:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 385:Core/Src/main.c ****   __disable_irq();
 386:Core/Src/main.c ****   while (1)
 908              		.loc 1 386 9 discriminator 1
 909 0008 FEE7     		b	.L34
 910              		.cfi_endproc
 911              	.LFE72:
 913              		.text
 914              	.Letext0:
 915              		.file 3 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\
 916              		.file 4 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_std
 917              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 918              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 919              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 920              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 921              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 922              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 923              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 924              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 925              		.file 13 "Core/Inc/fonts.h"
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 27


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:20     .bss.hi2c1:00000000 hi2c1
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:17     .bss.hi2c1:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:27     .bss.htim1:00000000 htim1
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:24     .bss.htim1:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:33     .bss.aLastState:00000000 aLastState
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:34     .bss.aLastState:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:39     .bss.aState:00000000 aState
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:40     .bss.aState:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:46     .bss.counter:00000000 counter
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:43     .bss.counter:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:53     .bss.iStep:00000000 iStep
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:50     .bss.iStep:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:56     .text.delayMicro:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:64     .text.delayMicro:00000000 delayMicro
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:119    .text.delayMicro:0000002c $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:124    .text.stepper_set_rpm:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:131    .text.stepper_set_rpm:00000000 stepper_set_rpm
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:171    .rodata:00000000 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:181    .text.main:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:188    .text.main:00000000 main
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:389    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:703    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:499    .text.MX_I2C1_Init:00000000 MX_I2C1_Init
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:578    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:368    .text.main:00000134 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:382    .text.SystemClock_Config:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:879    .text.Error_Handler:00000000 Error_Handler
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:493    .text.MX_I2C1_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:565    .text.MX_I2C1_Init:00000050 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:572    .text.MX_TIM1_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:691    .text.MX_TIM1_Init:00000098 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:697    .text.MX_GPIO_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:864    .text.MX_GPIO_Init:00000100 $d
C:\Users\danie\AppData\Local\Temp\cc8TL08i.s:872    .text.Error_Handler:00000000 $t

UNDEFINED SYMBOLS
HAL_Init
HAL_GPIO_ReadPin
SSD1306_Init
SSD1306_GotoXY
SSD1306_Puts
SSD1306_UpdateScreen
HAL_Delay
SSD1306_ScrollRight
SSD1306_ScrollLeft
SSD1306_Stopscroll
SSD1306_Clear
HAL_GPIO_WritePin
Font_11x18
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_I2C_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
ARM GAS  C:\Users\danie\AppData\Local\Temp\cc8TL08i.s 			page 28


HAL_TIMEx_MasterConfigSynchronization
HAL_GPIO_Init
