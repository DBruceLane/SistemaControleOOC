ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	htim1
  16              		.section	.bss.htim1,"aw",%nobits
  17              		.align	2
  20              	htim1:
  21 0000 00000000 		.space	72
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	iStep
  23              		.section	.bss.iStep,"aw",%nobits
  24              		.align	2
  27              	iStep:
  28 0000 00000000 		.space	4
  29              		.global	MeioPeriodo
  30              		.section	.data.MeioPeriodo,"aw"
  31              		.align	2
  34              	MeioPeriodo:
  35 0000 1E000000 		.word	30
  36              		.global	PPS
  37              		.section	.data.PPS,"aw"
  38              		.align	2
  41              	PPS:
  42 0000 C8000000 		.word	200
  43              		.global	PPR
  44              		.section	.data.PPR,"aw"
  45              		.align	2
  48              	PPR:
  49 0000 C8000000 		.word	200
  50              		.global	Pulsos
  51              		.section	.bss.Pulsos,"aw",%nobits
  52              		.align	2
  55              	Pulsos:
  56 0000 00000000 		.space	4
  57              		.global	Voltas
  58              		.section	.bss.Voltas,"aw",%nobits
  59              		.align	2
  62              	Voltas:
  63 0000 00000000 		.space	4
  64              		.section	.text.rst_DRV8825,"ax",%progbits
  65              		.align	1
  66              		.global	rst_DRV8825
  67              		.arch armv7-m
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 2


  68              		.syntax unified
  69              		.thumb
  70              		.thumb_func
  71              		.fpu softvfp
  73              	rst_DRV8825:
  74              	.LFB65:
  75              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.</center></h2>
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.c ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.c ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.c ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.c ****   *
  17:Core/Src/main.c ****   ******************************************************************************
  18:Core/Src/main.c ****   */
  19:Core/Src/main.c **** /* USER CODE END Header */
  20:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.c **** #include "main.h"
  22:Core/Src/main.c **** 
  23:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* USER CODE END Includes */
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** // StepperMotor
  37:Core/Src/main.c **** //#define stepsperrev 4096
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** TIM_HandleTypeDef htim1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE BEGIN PV */
  49:Core/Src/main.c **** 
  50:Core/Src/main.c **** 
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 3


  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** // StepperMotor
  53:Core/Src/main.c **** uint32_t iStep;
  54:Core/Src/main.c **** 
  55:Core/Src/main.c **** uint32_t MeioPeriodo = 30;   // MeioPeriodo no pulso em microsegundos  correcao de +10 ms 1490
  56:Core/Src/main.c **** uint32_t PPS = 200;          // Pulsos por segundo
  57:Core/Src/main.c **** //bool sentido = true;   // Variavel de sentido
  58:Core/Src/main.c **** uint32_t PPR = 200;            // NÃºmero de passos por volta
  59:Core/Src/main.c **** uint32_t Pulsos;               // Pulsos para o driver do motor
  60:Core/Src/main.c **** uint32_t Voltas;               // voltas do motor
  61:Core/Src/main.c **** //float RPM;                // Rotacoes por minuto
  62:Core/Src/main.c **** /* USER CODE END PV */
  63:Core/Src/main.c **** 
  64:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  65:Core/Src/main.c **** void SystemClock_Config(void);
  66:Core/Src/main.c **** static void MX_GPIO_Init(void);
  67:Core/Src/main.c **** static void MX_TIM1_Init(void);
  68:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** // StepperMotor
  71:Core/Src/main.c **** void rst_DRV8825()
  72:Core/Src/main.c **** {
  76              		.loc 1 72 1
  77              		.cfi_startproc
  78              		@ args = 0, pretend = 0, frame = 0
  79              		@ frame_needed = 1, uses_anonymous_args = 0
  80 0000 80B5     		push	{r7, lr}
  81              	.LCFI0:
  82              		.cfi_def_cfa_offset 8
  83              		.cfi_offset 7, -8
  84              		.cfi_offset 14, -4
  85 0002 00AF     		add	r7, sp, #0
  86              	.LCFI1:
  87              		.cfi_def_cfa_register 7
  73:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, RST_Pin, 0);    // Realiza o reset do DRV8825
  88              		.loc 1 73 3
  89 0004 0022     		movs	r2, #0
  90 0006 2021     		movs	r1, #32
  91 0008 0748     		ldr	r0, .L2
  92 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  74:Core/Src/main.c ****   HAL_Delay (1);                           // Atraso de 1 milisegundo
  93              		.loc 1 74 3
  94 000e 0120     		movs	r0, #1
  95 0010 FFF7FEFF 		bl	HAL_Delay
  75:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, RST_Pin, 1);    // Libera o reset do DRV8825
  96              		.loc 1 75 3
  97 0014 0122     		movs	r2, #1
  98 0016 2021     		movs	r1, #32
  99 0018 0348     		ldr	r0, .L2
 100 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
  76:Core/Src/main.c ****   HAL_Delay (10);                          // Atraso de 10 milisegundos
 101              		.loc 1 76 3
 102 001e 0A20     		movs	r0, #10
 103 0020 FFF7FEFF 		bl	HAL_Delay
  77:Core/Src/main.c **** }
 104              		.loc 1 77 1
 105 0024 00BF     		nop
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 4


 106 0026 80BD     		pop	{r7, pc}
 107              	.L3:
 108              		.align	2
 109              	.L2:
 110 0028 000C0140 		.word	1073810432
 111              		.cfi_endproc
 112              	.LFE65:
 114              		.section	.text.disa_DRV8825,"ax",%progbits
 115              		.align	1
 116              		.global	disa_DRV8825
 117              		.syntax unified
 118              		.thumb
 119              		.thumb_func
 120              		.fpu softvfp
 122              	disa_DRV8825:
 123              	.LFB66:
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** void disa_DRV8825()
  80:Core/Src/main.c **** {
 124              		.loc 1 80 1
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 80B5     		push	{r7, lr}
 129              	.LCFI2:
 130              		.cfi_def_cfa_offset 8
 131              		.cfi_offset 7, -8
 132              		.cfi_offset 14, -4
 133 0002 00AF     		add	r7, sp, #0
 134              	.LCFI3:
 135              		.cfi_def_cfa_register 7
  81:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, ENA_Pin, 1);    // Desativa o chip DRV8825
 136              		.loc 1 81 3
 137 0004 0122     		movs	r2, #1
 138 0006 4FF40071 		mov	r1, #512
 139 000a 0448     		ldr	r0, .L5
 140 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
  82:Core/Src/main.c ****   HAL_Delay (10);                          // Atraso de 10 milisegundos
 141              		.loc 1 82 3
 142 0010 0A20     		movs	r0, #10
 143 0012 FFF7FEFF 		bl	HAL_Delay
  83:Core/Src/main.c **** }
 144              		.loc 1 83 1
 145 0016 00BF     		nop
 146 0018 80BD     		pop	{r7, pc}
 147              	.L6:
 148 001a 00BF     		.align	2
 149              	.L5:
 150 001c 000C0140 		.word	1073810432
 151              		.cfi_endproc
 152              	.LFE66:
 154              		.section	.text.ena_DRV8825,"ax",%progbits
 155              		.align	1
 156              		.global	ena_DRV8825
 157              		.syntax unified
 158              		.thumb
 159              		.thumb_func
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 5


 160              		.fpu softvfp
 162              	ena_DRV8825:
 163              	.LFB67:
  84:Core/Src/main.c **** 
  85:Core/Src/main.c **** void ena_DRV8825()
  86:Core/Src/main.c **** {
 164              		.loc 1 86 1
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 1, uses_anonymous_args = 0
 168 0000 80B5     		push	{r7, lr}
 169              	.LCFI4:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 7, -8
 172              		.cfi_offset 14, -4
 173 0002 00AF     		add	r7, sp, #0
 174              	.LCFI5:
 175              		.cfi_def_cfa_register 7
  87:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, ENA_Pin, 0);     // Ativa o chip DRV8825
 176              		.loc 1 87 3
 177 0004 0022     		movs	r2, #0
 178 0006 4FF40071 		mov	r1, #512
 179 000a 0448     		ldr	r0, .L8
 180 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
  88:Core/Src/main.c ****   HAL_Delay (10);                           // Atraso de 10 milisegundos
 181              		.loc 1 88 3
 182 0010 0A20     		movs	r0, #10
 183 0012 FFF7FEFF 		bl	HAL_Delay
  89:Core/Src/main.c **** }
 184              		.loc 1 89 1
 185 0016 00BF     		nop
 186 0018 80BD     		pop	{r7, pc}
 187              	.L9:
 188 001a 00BF     		.align	2
 189              	.L8:
 190 001c 000C0140 		.word	1073810432
 191              		.cfi_endproc
 192              	.LFE67:
 194              		.section	.text.HOR,"ax",%progbits
 195              		.align	1
 196              		.global	HOR
 197              		.syntax unified
 198              		.thumb
 199              		.thumb_func
 200              		.fpu softvfp
 202              	HOR:
 203              	.LFB68:
  90:Core/Src/main.c **** 
  91:Core/Src/main.c **** void HOR()                                    // Configura o sentido de rotaÃ§Ã£o do Motor
  92:Core/Src/main.c **** {
 204              		.loc 1 92 1
 205              		.cfi_startproc
 206              		@ args = 0, pretend = 0, frame = 0
 207              		@ frame_needed = 1, uses_anonymous_args = 0
 208 0000 80B5     		push	{r7, lr}
 209              	.LCFI6:
 210              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 6


 211              		.cfi_offset 7, -8
 212              		.cfi_offset 14, -4
 213 0002 00AF     		add	r7, sp, #0
 214              	.LCFI7:
 215              		.cfi_def_cfa_register 7
  93:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, DIR_Pin, 1);       // Configura o sentido HORÃRIO
 216              		.loc 1 93 3
 217 0004 0122     		movs	r2, #1
 218 0006 4FF40041 		mov	r1, #32768
 219 000a 0248     		ldr	r0, .L11
 220 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
  94:Core/Src/main.c ****   
  95:Core/Src/main.c **** }
 221              		.loc 1 95 1
 222 0010 00BF     		nop
 223 0012 80BD     		pop	{r7, pc}
 224              	.L12:
 225              		.align	2
 226              	.L11:
 227 0014 00080140 		.word	1073809408
 228              		.cfi_endproc
 229              	.LFE68:
 231              		.section	.text.AHR,"ax",%progbits
 232              		.align	1
 233              		.global	AHR
 234              		.syntax unified
 235              		.thumb
 236              		.thumb_func
 237              		.fpu softvfp
 239              	AHR:
 240              	.LFB69:
  96:Core/Src/main.c **** 
  97:Core/Src/main.c **** void AHR()                                    // Configura o sentido de rotaÃ§Ã£o do Motor
  98:Core/Src/main.c **** {
 241              		.loc 1 98 1
 242              		.cfi_startproc
 243              		@ args = 0, pretend = 0, frame = 0
 244              		@ frame_needed = 1, uses_anonymous_args = 0
 245 0000 80B5     		push	{r7, lr}
 246              	.LCFI8:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 00AF     		add	r7, sp, #0
 251              	.LCFI9:
 252              		.cfi_def_cfa_register 7
  99:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, DIR_Pin, 0);       // Configura o sentido ANTI-HORÃRIO
 253              		.loc 1 99 3
 254 0004 0022     		movs	r2, #0
 255 0006 4FF40041 		mov	r1, #32768
 256 000a 0248     		ldr	r0, .L14
 257 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 100:Core/Src/main.c ****   
 101:Core/Src/main.c **** }
 258              		.loc 1 101 1
 259 0010 00BF     		nop
 260 0012 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 7


 261              	.L15:
 262              		.align	2
 263              	.L14:
 264 0014 00080140 		.word	1073809408
 265              		.cfi_endproc
 266              	.LFE69:
 268              		.section	.text.PASSO,"ax",%progbits
 269              		.align	1
 270              		.global	PASSO
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 276              	PASSO:
 277              	.LFB70:
 102:Core/Src/main.c **** 
 103:Core/Src/main.c **** void PASSO()                              // Pulso do passo do Motor
 104:Core/Src/main.c **** {
 278              		.loc 1 104 1
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 0000 80B5     		push	{r7, lr}
 283              	.LCFI10:
 284              		.cfi_def_cfa_offset 8
 285              		.cfi_offset 7, -8
 286              		.cfi_offset 14, -4
 287 0002 00AF     		add	r7, sp, #0
 288              	.LCFI11:
 289              		.cfi_def_cfa_register 7
 105:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, STP_Pin, 0);   // Pulso nÃ­vel baixo
 290              		.loc 1 105 3
 291 0004 0022     		movs	r2, #0
 292 0006 0821     		movs	r1, #8
 293 0008 0748     		ldr	r0, .L17
 294 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 106:Core/Src/main.c ****   HAL_Delay (1);                          // MeioPeriodo de X milisegundos
 295              		.loc 1 106 3
 296 000e 0120     		movs	r0, #1
 297 0010 FFF7FEFF 		bl	HAL_Delay
 107:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, STP_Pin, 1);   // Pulso nÃ­vel alto
 298              		.loc 1 107 3
 299 0014 0122     		movs	r2, #1
 300 0016 0821     		movs	r1, #8
 301 0018 0348     		ldr	r0, .L17
 302 001a FFF7FEFF 		bl	HAL_GPIO_WritePin
 108:Core/Src/main.c ****   HAL_Delay (1);                          // MeioPeriodo de X milisegundos
 303              		.loc 1 108 3
 304 001e 0120     		movs	r0, #1
 305 0020 FFF7FEFF 		bl	HAL_Delay
 109:Core/Src/main.c **** }
 306              		.loc 1 109 1
 307 0024 00BF     		nop
 308 0026 80BD     		pop	{r7, pc}
 309              	.L18:
 310              		.align	2
 311              	.L17:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 8


 312 0028 000C0140 		.word	1073810432
 313              		.cfi_endproc
 314              	.LFE70:
 316              		.section	.text.P1_32,"ax",%progbits
 317              		.align	1
 318              		.global	P1_32
 319              		.syntax unified
 320              		.thumb
 321              		.thumb_func
 322              		.fpu softvfp
 324              	P1_32:
 325              	.LFB71:
 110:Core/Src/main.c **** 
 111:Core/Src/main.c **** void P1_32()
 112:Core/Src/main.c **** {
 326              		.loc 1 112 1
 327              		.cfi_startproc
 328              		@ args = 0, pretend = 0, frame = 0
 329              		@ frame_needed = 1, uses_anonymous_args = 0
 330 0000 80B5     		push	{r7, lr}
 331              	.LCFI12:
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 7, -8
 334              		.cfi_offset 14, -4
 335 0002 00AF     		add	r7, sp, #0
 336              	.LCFI13:
 337              		.cfi_def_cfa_register 7
 113:Core/Src/main.c ****   PPR = 6400;                        // PPR pulsos por volta
 338              		.loc 1 113 7
 339 0004 0A4B     		ldr	r3, .L20
 340 0006 4FF4C852 		mov	r2, #6400
 341 000a 1A60     		str	r2, [r3]
 114:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, M0_Pin, 1);    // Configura modo Micro Passo 1/32
 342              		.loc 1 114 3
 343 000c 0122     		movs	r2, #1
 344 000e 4FF48071 		mov	r1, #256
 345 0012 0848     		ldr	r0, .L20+4
 346 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 115:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, M1_Pin, 0);
 347              		.loc 1 115 3
 348 0018 0022     		movs	r2, #0
 349 001a 8021     		movs	r1, #128
 350 001c 0548     		ldr	r0, .L20+4
 351 001e FFF7FEFF 		bl	HAL_GPIO_WritePin
 116:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, M2_Pin, 1);
 352              		.loc 1 116 3
 353 0022 0122     		movs	r2, #1
 354 0024 4021     		movs	r1, #64
 355 0026 0348     		ldr	r0, .L20+4
 356 0028 FFF7FEFF 		bl	HAL_GPIO_WritePin
 117:Core/Src/main.c ****   
 118:Core/Src/main.c **** }
 357              		.loc 1 118 1
 358 002c 00BF     		nop
 359 002e 80BD     		pop	{r7, pc}
 360              	.L21:
 361              		.align	2
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 9


 362              	.L20:
 363 0030 00000000 		.word	PPR
 364 0034 000C0140 		.word	1073810432
 365              		.cfi_endproc
 366              	.LFE71:
 368              		.section	.text.TesteMotor,"ax",%progbits
 369              		.align	1
 370              		.global	TesteMotor
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu softvfp
 376              	TesteMotor:
 377              	.LFB72:
 119:Core/Src/main.c **** 
 120:Core/Src/main.c **** void TesteMotor()            // Gira motor nos dois sentidos
 121:Core/Src/main.c **** {
 378              		.loc 1 121 1
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 8
 381              		@ frame_needed = 1, uses_anonymous_args = 0
 382 0000 80B5     		push	{r7, lr}
 383              	.LCFI14:
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 7, -8
 386              		.cfi_offset 14, -4
 387 0002 82B0     		sub	sp, sp, #8
 388              	.LCFI15:
 389              		.cfi_def_cfa_offset 16
 390 0004 00AF     		add	r7, sp, #0
 391              	.LCFI16:
 392              		.cfi_def_cfa_register 7
 122:Core/Src/main.c ****   HOR();
 393              		.loc 1 122 3
 394 0006 FFF7FEFF 		bl	HOR
 123:Core/Src/main.c ****   uint32_t i;
 124:Core/Src/main.c ****   for (i = 0; i <= Pulsos; i++)       // Incrementa o Contador
 395              		.loc 1 124 10
 396 000a 0023     		movs	r3, #0
 397 000c 7B60     		str	r3, [r7, #4]
 398              		.loc 1 124 3
 399 000e 04E0     		b	.L23
 400              	.L24:
 125:Core/Src/main.c ****   {
 126:Core/Src/main.c ****     PASSO();                              // AvanÃ§a um passo no Motor
 401              		.loc 1 126 5 discriminator 3
 402 0010 FFF7FEFF 		bl	PASSO
 124:Core/Src/main.c ****   {
 403              		.loc 1 124 29 discriminator 3
 404 0014 7B68     		ldr	r3, [r7, #4]
 405 0016 0133     		adds	r3, r3, #1
 406 0018 7B60     		str	r3, [r7, #4]
 407              	.L23:
 124:Core/Src/main.c ****   {
 408              		.loc 1 124 17 discriminator 1
 409 001a 144B     		ldr	r3, .L27
 410 001c 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 10


 124:Core/Src/main.c ****   {
 411              		.loc 1 124 3 discriminator 1
 412 001e 7A68     		ldr	r2, [r7, #4]
 413 0020 9A42     		cmp	r2, r3
 414 0022 F5D9     		bls	.L24
 127:Core/Src/main.c ****   }
 128:Core/Src/main.c ****   disa_DRV8825();
 415              		.loc 1 128 3
 416 0024 FFF7FEFF 		bl	disa_DRV8825
 129:Core/Src/main.c ****   HAL_Delay (750) ;                           // Atraso de 750 mseg
 417              		.loc 1 129 3
 418 0028 40F2EE20 		movw	r0, #750
 419 002c FFF7FEFF 		bl	HAL_Delay
 130:Core/Src/main.c ****   ena_DRV8825();
 420              		.loc 1 130 3
 421 0030 FFF7FEFF 		bl	ena_DRV8825
 131:Core/Src/main.c ****   AHR();
 422              		.loc 1 131 3
 423 0034 FFF7FEFF 		bl	AHR
 132:Core/Src/main.c ****   
 133:Core/Src/main.c ****   for (i = 0; i <= Pulsos; i++)       // Incrementa o Contador
 424              		.loc 1 133 10
 425 0038 0023     		movs	r3, #0
 426 003a 7B60     		str	r3, [r7, #4]
 427              		.loc 1 133 3
 428 003c 04E0     		b	.L25
 429              	.L26:
 134:Core/Src/main.c ****   {
 135:Core/Src/main.c ****     PASSO();                              // AvanÃ§a um passo no Motor
 430              		.loc 1 135 5 discriminator 3
 431 003e FFF7FEFF 		bl	PASSO
 133:Core/Src/main.c ****   {
 432              		.loc 1 133 29 discriminator 3
 433 0042 7B68     		ldr	r3, [r7, #4]
 434 0044 0133     		adds	r3, r3, #1
 435 0046 7B60     		str	r3, [r7, #4]
 436              	.L25:
 133:Core/Src/main.c ****   {
 437              		.loc 1 133 17 discriminator 1
 438 0048 084B     		ldr	r3, .L27
 439 004a 1B68     		ldr	r3, [r3]
 133:Core/Src/main.c ****   {
 440              		.loc 1 133 3 discriminator 1
 441 004c 7A68     		ldr	r2, [r7, #4]
 442 004e 9A42     		cmp	r2, r3
 443 0050 F5D9     		bls	.L26
 136:Core/Src/main.c ****   }
 137:Core/Src/main.c ****   disa_DRV8825();
 444              		.loc 1 137 3
 445 0052 FFF7FEFF 		bl	disa_DRV8825
 138:Core/Src/main.c ****   HAL_Delay (750) ;                           // Atraso de 750 mseg
 446              		.loc 1 138 3
 447 0056 40F2EE20 		movw	r0, #750
 448 005a FFF7FEFF 		bl	HAL_Delay
 139:Core/Src/main.c ****   ena_DRV8825();
 449              		.loc 1 139 3
 450 005e FFF7FEFF 		bl	ena_DRV8825
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 11


 140:Core/Src/main.c **** }
 451              		.loc 1 140 1
 452 0062 00BF     		nop
 453 0064 0837     		adds	r7, r7, #8
 454              	.LCFI17:
 455              		.cfi_def_cfa_offset 8
 456 0066 BD46     		mov	sp, r7
 457              	.LCFI18:
 458              		.cfi_def_cfa_register 13
 459              		@ sp needed
 460 0068 80BD     		pop	{r7, pc}
 461              	.L28:
 462 006a 00BF     		.align	2
 463              	.L27:
 464 006c 00000000 		.word	Pulsos
 465              		.cfi_endproc
 466              	.LFE72:
 468              		.section	.text.Frequencia,"ax",%progbits
 469              		.align	1
 470              		.global	Frequencia
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu softvfp
 476              	Frequencia:
 477              	.LFB73:
 141:Core/Src/main.c **** void Frequencia()                     // Configura Frequencia dos pulsos
 142:Core/Src/main.c **** {
 478              		.loc 1 142 1
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 0
 481              		@ frame_needed = 1, uses_anonymous_args = 0
 482              		@ link register save eliminated.
 483 0000 80B4     		push	{r7}
 484              	.LCFI19:
 485              		.cfi_def_cfa_offset 4
 486              		.cfi_offset 7, -4
 487 0002 00AF     		add	r7, sp, #0
 488              	.LCFI20:
 489              		.cfi_def_cfa_register 7
 143:Core/Src/main.c ****   Pulsos = PPR * Voltas;              // Quantidade total de Pulsos  PPR = pulsos por volta
 490              		.loc 1 143 16
 491 0004 074B     		ldr	r3, .L30
 492 0006 1B68     		ldr	r3, [r3]
 493 0008 074A     		ldr	r2, .L30+4
 494 000a 1268     		ldr	r2, [r2]
 495 000c 02FB03F3 		mul	r3, r2, r3
 496              		.loc 1 143 10
 497 0010 064A     		ldr	r2, .L30+8
 498 0012 1360     		str	r3, [r2]
 144:Core/Src/main.c ****   //PPS = 1000000 / (2 * MeioPeriodo);  // Frequencia Pulsos por segundo
 145:Core/Src/main.c ****   PPS = 2;
 499              		.loc 1 145 7
 500 0014 064B     		ldr	r3, .L30+12
 501 0016 0222     		movs	r2, #2
 502 0018 1A60     		str	r2, [r3]
 146:Core/Src/main.c ****   //RPM = (PPS * 60) / PPR;             // Calculo do RPM
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 12


 147:Core/Src/main.c **** }
 503              		.loc 1 147 1
 504 001a 00BF     		nop
 505 001c BD46     		mov	sp, r7
 506              	.LCFI21:
 507              		.cfi_def_cfa_register 13
 508              		@ sp needed
 509 001e 80BC     		pop	{r7}
 510              	.LCFI22:
 511              		.cfi_restore 7
 512              		.cfi_def_cfa_offset 0
 513 0020 7047     		bx	lr
 514              	.L31:
 515 0022 00BF     		.align	2
 516              	.L30:
 517 0024 00000000 		.word	PPR
 518 0028 00000000 		.word	Voltas
 519 002c 00000000 		.word	Pulsos
 520 0030 00000000 		.word	PPS
 521              		.cfi_endproc
 522              	.LFE73:
 524              		.section	.text.main,"ax",%progbits
 525              		.align	1
 526              		.global	main
 527              		.syntax unified
 528              		.thumb
 529              		.thumb_func
 530              		.fpu softvfp
 532              	main:
 533              	.LFB74:
 148:Core/Src/main.c **** /* USER CODE END PFP */
 149:Core/Src/main.c **** 
 150:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 151:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 152:Core/Src/main.c **** 
 153:Core/Src/main.c **** /* USER CODE END 0 */
 154:Core/Src/main.c **** 
 155:Core/Src/main.c **** /**
 156:Core/Src/main.c ****   * @brief  The application entry point.
 157:Core/Src/main.c ****   * @retval int
 158:Core/Src/main.c ****   */
 159:Core/Src/main.c **** int main(void)
 160:Core/Src/main.c **** {
 534              		.loc 1 160 1
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 0
 537              		@ frame_needed = 1, uses_anonymous_args = 0
 538 0000 80B5     		push	{r7, lr}
 539              	.LCFI23:
 540              		.cfi_def_cfa_offset 8
 541              		.cfi_offset 7, -8
 542              		.cfi_offset 14, -4
 543 0002 00AF     		add	r7, sp, #0
 544              	.LCFI24:
 545              		.cfi_def_cfa_register 7
 161:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 162:Core/Src/main.c ****   
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 13


 163:Core/Src/main.c ****   /* USER CODE END 1 */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 168:Core/Src/main.c ****   HAL_Init();
 546              		.loc 1 168 3
 547 0004 FFF7FEFF 		bl	HAL_Init
 169:Core/Src/main.c **** 
 170:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   /* USER CODE END Init */
 173:Core/Src/main.c **** 
 174:Core/Src/main.c ****   /* Configure the system clock */
 175:Core/Src/main.c ****   SystemClock_Config();
 548              		.loc 1 175 3
 549 0008 FFF7FEFF 		bl	SystemClock_Config
 176:Core/Src/main.c **** 
 177:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 178:Core/Src/main.c **** 
 179:Core/Src/main.c ****   /* USER CODE END SysInit */
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   /* Initialize all configured peripherals */
 182:Core/Src/main.c ****   MX_GPIO_Init();
 550              		.loc 1 182 3
 551 000c FFF7FEFF 		bl	MX_GPIO_Init
 183:Core/Src/main.c ****   MX_TIM1_Init();
 552              		.loc 1 183 3
 553 0010 FFF7FEFF 		bl	MX_TIM1_Init
 184:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   // StepperMotor
 188:Core/Src/main.c ****   
 189:Core/Src/main.c ****   disa_DRV8825();           // Desativa as saidas DRV8825
 554              		.loc 1 189 3
 555 0014 FFF7FEFF 		bl	disa_DRV8825
 190:Core/Src/main.c ****   P1_32();                    // Seleciona modo Passo Completo
 556              		.loc 1 190 3
 557 0018 FFF7FEFF 		bl	P1_32
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, SLP_Pin, 1);  // Desativa modo sleep do DRV8825
 558              		.loc 1 192 3
 559 001c 0122     		movs	r2, #1
 560 001e 1021     		movs	r1, #16
 561 0020 1348     		ldr	r0, .L34
 562 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 193:Core/Src/main.c ****   rst_DRV8825();            // Reseta o chip DRV8825
 563              		.loc 1 193 3
 564 0026 FFF7FEFF 		bl	rst_DRV8825
 194:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, ENA_Pin, 0);   // Ativa as saidas DRV8825
 565              		.loc 1 194 3
 566 002a 0022     		movs	r2, #0
 567 002c 4FF40071 		mov	r1, #512
 568 0030 0F48     		ldr	r0, .L34
 569 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 570              	.L33:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 14


 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /* USER CODE END 2 */
 197:Core/Src/main.c **** 
 198:Core/Src/main.c ****   /* Infinite loop */
 199:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 200:Core/Src/main.c ****   while (1)
 201:Core/Src/main.c ****   {
 202:Core/Src/main.c ****     // Blinky LED
 203:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, LEDc13_Pin, 0);
 571              		.loc 1 203 5 discriminator 1
 572 0036 0022     		movs	r2, #0
 573 0038 4FF40051 		mov	r1, #8192
 574 003c 0D48     		ldr	r0, .L34+4
 575 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 204:Core/Src/main.c ****     HAL_Delay(25);
 576              		.loc 1 204 5 discriminator 1
 577 0042 1920     		movs	r0, #25
 578 0044 FFF7FEFF 		bl	HAL_Delay
 205:Core/Src/main.c ****     HAL_GPIO_WritePin(GPIOC, LEDc13_Pin, 1);
 579              		.loc 1 205 5 discriminator 1
 580 0048 0122     		movs	r2, #1
 581 004a 4FF40051 		mov	r1, #8192
 582 004e 0948     		ldr	r0, .L34+4
 583 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 206:Core/Src/main.c ****     HAL_Delay(50);
 584              		.loc 1 206 5 discriminator 1
 585 0054 3220     		movs	r0, #50
 586 0056 FFF7FEFF 		bl	HAL_Delay
 207:Core/Src/main.c **** 
 208:Core/Src/main.c **** 	  // StepperMotor
 209:Core/Src/main.c ****     Voltas = 1;         // Numero de voltas no Motor
 587              		.loc 1 209 12 discriminator 1
 588 005a 074B     		ldr	r3, .L34+8
 589 005c 0122     		movs	r2, #1
 590 005e 1A60     		str	r2, [r3]
 210:Core/Src/main.c ****     P1_32();            // Selecione o Modo do Passo FULL() HALF() P1_4() P1_8() P1_16() P1_32()
 591              		.loc 1 210 5 discriminator 1
 592 0060 FFF7FEFF 		bl	P1_32
 211:Core/Src/main.c ****     Frequencia();       // Calcula RPM
 593              		.loc 1 211 5 discriminator 1
 594 0064 FFF7FEFF 		bl	Frequencia
 212:Core/Src/main.c ****     
 213:Core/Src/main.c ****     TesteMotor();       // Testa o Motor
 595              		.loc 1 213 5 discriminator 1
 596 0068 FFF7FEFF 		bl	TesteMotor
 203:Core/Src/main.c ****     HAL_Delay(25);
 597              		.loc 1 203 5 discriminator 1
 598 006c E3E7     		b	.L33
 599              	.L35:
 600 006e 00BF     		.align	2
 601              	.L34:
 602 0070 000C0140 		.word	1073810432
 603 0074 00100140 		.word	1073811456
 604 0078 00000000 		.word	Voltas
 605              		.cfi_endproc
 606              	.LFE74:
 608              		.section	.text.SystemClock_Config,"ax",%progbits
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 15


 609              		.align	1
 610              		.global	SystemClock_Config
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.fpu softvfp
 616              	SystemClock_Config:
 617              	.LFB75:
 214:Core/Src/main.c **** 	  
 215:Core/Src/main.c ****     /* USER CODE END WHILE */
 216:Core/Src/main.c **** 
 217:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 218:Core/Src/main.c ****   }
 219:Core/Src/main.c ****   /* USER CODE END 3 */
 220:Core/Src/main.c **** }
 221:Core/Src/main.c **** 
 222:Core/Src/main.c **** /**
 223:Core/Src/main.c ****   * @brief System Clock Configuration
 224:Core/Src/main.c ****   * @retval None
 225:Core/Src/main.c ****   */
 226:Core/Src/main.c **** void SystemClock_Config(void)
 227:Core/Src/main.c **** {
 618              		.loc 1 227 1
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 64
 621              		@ frame_needed = 1, uses_anonymous_args = 0
 622 0000 80B5     		push	{r7, lr}
 623              	.LCFI25:
 624              		.cfi_def_cfa_offset 8
 625              		.cfi_offset 7, -8
 626              		.cfi_offset 14, -4
 627 0002 90B0     		sub	sp, sp, #64
 628              	.LCFI26:
 629              		.cfi_def_cfa_offset 72
 630 0004 00AF     		add	r7, sp, #0
 631              	.LCFI27:
 632              		.cfi_def_cfa_register 7
 228:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 633              		.loc 1 228 22
 634 0006 07F11803 		add	r3, r7, #24
 635 000a 2822     		movs	r2, #40
 636 000c 0021     		movs	r1, #0
 637 000e 1846     		mov	r0, r3
 638 0010 FFF7FEFF 		bl	memset
 229:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 639              		.loc 1 229 22
 640 0014 3B1D     		adds	r3, r7, #4
 641 0016 0022     		movs	r2, #0
 642 0018 1A60     		str	r2, [r3]
 643 001a 5A60     		str	r2, [r3, #4]
 644 001c 9A60     		str	r2, [r3, #8]
 645 001e DA60     		str	r2, [r3, #12]
 646 0020 1A61     		str	r2, [r3, #16]
 230:Core/Src/main.c **** 
 231:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 232:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 233:Core/Src/main.c ****   */
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 16


 234:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 647              		.loc 1 234 36
 648 0022 0123     		movs	r3, #1
 649 0024 BB61     		str	r3, [r7, #24]
 235:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 650              		.loc 1 235 30
 651 0026 4FF48033 		mov	r3, #65536
 652 002a FB61     		str	r3, [r7, #28]
 236:Core/Src/main.c ****   RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 653              		.loc 1 236 36
 654 002c 0023     		movs	r3, #0
 655 002e 3B62     		str	r3, [r7, #32]
 237:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 656              		.loc 1 237 30
 657 0030 0123     		movs	r3, #1
 658 0032 BB62     		str	r3, [r7, #40]
 238:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 659              		.loc 1 238 34
 660 0034 0223     		movs	r3, #2
 661 0036 7B63     		str	r3, [r7, #52]
 239:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 662              		.loc 1 239 35
 663 0038 4FF48033 		mov	r3, #65536
 664 003c BB63     		str	r3, [r7, #56]
 240:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 665              		.loc 1 240 32
 666 003e 4FF4E013 		mov	r3, #1835008
 667 0042 FB63     		str	r3, [r7, #60]
 241:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 668              		.loc 1 241 7
 669 0044 07F11803 		add	r3, r7, #24
 670 0048 1846     		mov	r0, r3
 671 004a FFF7FEFF 		bl	HAL_RCC_OscConfig
 672 004e 0346     		mov	r3, r0
 673              		.loc 1 241 6
 674 0050 002B     		cmp	r3, #0
 675 0052 01D0     		beq	.L37
 242:Core/Src/main.c ****   {
 243:Core/Src/main.c ****     Error_Handler();
 676              		.loc 1 243 5
 677 0054 FFF7FEFF 		bl	Error_Handler
 678              	.L37:
 244:Core/Src/main.c ****   }
 245:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 246:Core/Src/main.c ****   */
 247:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 679              		.loc 1 247 31
 680 0058 0F23     		movs	r3, #15
 681 005a 7B60     		str	r3, [r7, #4]
 248:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 249:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 682              		.loc 1 249 34
 683 005c 0223     		movs	r3, #2
 684 005e BB60     		str	r3, [r7, #8]
 250:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 685              		.loc 1 250 35
 686 0060 0023     		movs	r3, #0
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 17


 687 0062 FB60     		str	r3, [r7, #12]
 251:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 688              		.loc 1 251 36
 689 0064 4FF48063 		mov	r3, #1024
 690 0068 3B61     		str	r3, [r7, #16]
 252:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 691              		.loc 1 252 36
 692 006a 0023     		movs	r3, #0
 693 006c 7B61     		str	r3, [r7, #20]
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 694              		.loc 1 254 7
 695 006e 3B1D     		adds	r3, r7, #4
 696 0070 0221     		movs	r1, #2
 697 0072 1846     		mov	r0, r3
 698 0074 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 699 0078 0346     		mov	r3, r0
 700              		.loc 1 254 6
 701 007a 002B     		cmp	r3, #0
 702 007c 01D0     		beq	.L39
 255:Core/Src/main.c ****   {
 256:Core/Src/main.c ****     Error_Handler();
 703              		.loc 1 256 5
 704 007e FFF7FEFF 		bl	Error_Handler
 705              	.L39:
 257:Core/Src/main.c ****   }
 258:Core/Src/main.c **** }
 706              		.loc 1 258 1
 707 0082 00BF     		nop
 708 0084 4037     		adds	r7, r7, #64
 709              	.LCFI28:
 710              		.cfi_def_cfa_offset 8
 711 0086 BD46     		mov	sp, r7
 712              	.LCFI29:
 713              		.cfi_def_cfa_register 13
 714              		@ sp needed
 715 0088 80BD     		pop	{r7, pc}
 716              		.cfi_endproc
 717              	.LFE75:
 719              		.section	.text.MX_TIM1_Init,"ax",%progbits
 720              		.align	1
 721              		.syntax unified
 722              		.thumb
 723              		.thumb_func
 724              		.fpu softvfp
 726              	MX_TIM1_Init:
 727              	.LFB76:
 259:Core/Src/main.c **** 
 260:Core/Src/main.c **** /**
 261:Core/Src/main.c ****   * @brief TIM1 Initialization Function
 262:Core/Src/main.c ****   * @param None
 263:Core/Src/main.c ****   * @retval None
 264:Core/Src/main.c ****   */
 265:Core/Src/main.c **** static void MX_TIM1_Init(void)
 266:Core/Src/main.c **** {
 728              		.loc 1 266 1
 729              		.cfi_startproc
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 18


 730              		@ args = 0, pretend = 0, frame = 24
 731              		@ frame_needed = 1, uses_anonymous_args = 0
 732 0000 80B5     		push	{r7, lr}
 733              	.LCFI30:
 734              		.cfi_def_cfa_offset 8
 735              		.cfi_offset 7, -8
 736              		.cfi_offset 14, -4
 737 0002 86B0     		sub	sp, sp, #24
 738              	.LCFI31:
 739              		.cfi_def_cfa_offset 32
 740 0004 00AF     		add	r7, sp, #0
 741              	.LCFI32:
 742              		.cfi_def_cfa_register 7
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 0 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c ****   /* USER CODE END TIM1_Init 0 */
 271:Core/Src/main.c **** 
 272:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 743              		.loc 1 272 26
 744 0006 07F10803 		add	r3, r7, #8
 745 000a 0022     		movs	r2, #0
 746 000c 1A60     		str	r2, [r3]
 747 000e 5A60     		str	r2, [r3, #4]
 748 0010 9A60     		str	r2, [r3, #8]
 749 0012 DA60     		str	r2, [r3, #12]
 273:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 750              		.loc 1 273 27
 751 0014 3B46     		mov	r3, r7
 752 0016 0022     		movs	r2, #0
 753 0018 1A60     		str	r2, [r3]
 754 001a 5A60     		str	r2, [r3, #4]
 274:Core/Src/main.c **** 
 275:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 1 */
 276:Core/Src/main.c **** 
 277:Core/Src/main.c ****   /* USER CODE END TIM1_Init 1 */
 278:Core/Src/main.c ****   htim1.Instance = TIM1;
 755              		.loc 1 278 18
 756 001c 1E4B     		ldr	r3, .L45
 757 001e 1F4A     		ldr	r2, .L45+4
 758 0020 1A60     		str	r2, [r3]
 279:Core/Src/main.c ****   htim1.Init.Prescaler = 72-1;
 759              		.loc 1 279 24
 760 0022 1D4B     		ldr	r3, .L45
 761 0024 4722     		movs	r2, #71
 762 0026 5A60     		str	r2, [r3, #4]
 280:Core/Src/main.c ****   htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 763              		.loc 1 280 26
 764 0028 1B4B     		ldr	r3, .L45
 765 002a 0022     		movs	r2, #0
 766 002c 9A60     		str	r2, [r3, #8]
 281:Core/Src/main.c ****   htim1.Init.Period = 0xffff-1;
 767              		.loc 1 281 21
 768 002e 1A4B     		ldr	r3, .L45
 769 0030 4FF6FE72 		movw	r2, #65534
 770 0034 DA60     		str	r2, [r3, #12]
 282:Core/Src/main.c ****   htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 19


 771              		.loc 1 282 28
 772 0036 184B     		ldr	r3, .L45
 773 0038 0022     		movs	r2, #0
 774 003a 1A61     		str	r2, [r3, #16]
 283:Core/Src/main.c ****   htim1.Init.RepetitionCounter = 0;
 775              		.loc 1 283 32
 776 003c 164B     		ldr	r3, .L45
 777 003e 0022     		movs	r2, #0
 778 0040 5A61     		str	r2, [r3, #20]
 284:Core/Src/main.c ****   htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 779              		.loc 1 284 32
 780 0042 154B     		ldr	r3, .L45
 781 0044 0022     		movs	r2, #0
 782 0046 9A61     		str	r2, [r3, #24]
 285:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 783              		.loc 1 285 7
 784 0048 1348     		ldr	r0, .L45
 785 004a FFF7FEFF 		bl	HAL_TIM_Base_Init
 786 004e 0346     		mov	r3, r0
 787              		.loc 1 285 6
 788 0050 002B     		cmp	r3, #0
 789 0052 01D0     		beq	.L41
 286:Core/Src/main.c ****   {
 287:Core/Src/main.c ****     Error_Handler();
 790              		.loc 1 287 5
 791 0054 FFF7FEFF 		bl	Error_Handler
 792              	.L41:
 288:Core/Src/main.c ****   }
 289:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 793              		.loc 1 289 34
 794 0058 4FF48053 		mov	r3, #4096
 795 005c BB60     		str	r3, [r7, #8]
 290:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 796              		.loc 1 290 7
 797 005e 07F10803 		add	r3, r7, #8
 798 0062 1946     		mov	r1, r3
 799 0064 0C48     		ldr	r0, .L45
 800 0066 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 801 006a 0346     		mov	r3, r0
 802              		.loc 1 290 6
 803 006c 002B     		cmp	r3, #0
 804 006e 01D0     		beq	.L42
 291:Core/Src/main.c ****   {
 292:Core/Src/main.c ****     Error_Handler();
 805              		.loc 1 292 5
 806 0070 FFF7FEFF 		bl	Error_Handler
 807              	.L42:
 293:Core/Src/main.c ****   }
 294:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 808              		.loc 1 294 37
 809 0074 0023     		movs	r3, #0
 810 0076 3B60     		str	r3, [r7]
 295:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 811              		.loc 1 295 33
 812 0078 0023     		movs	r3, #0
 813 007a 7B60     		str	r3, [r7, #4]
 296:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 20


 814              		.loc 1 296 7
 815 007c 3B46     		mov	r3, r7
 816 007e 1946     		mov	r1, r3
 817 0080 0548     		ldr	r0, .L45
 818 0082 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 819 0086 0346     		mov	r3, r0
 820              		.loc 1 296 6
 821 0088 002B     		cmp	r3, #0
 822 008a 01D0     		beq	.L44
 297:Core/Src/main.c ****   {
 298:Core/Src/main.c ****     Error_Handler();
 823              		.loc 1 298 5
 824 008c FFF7FEFF 		bl	Error_Handler
 825              	.L44:
 299:Core/Src/main.c ****   }
 300:Core/Src/main.c ****   /* USER CODE BEGIN TIM1_Init 2 */
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****   /* USER CODE END TIM1_Init 2 */
 303:Core/Src/main.c **** 
 304:Core/Src/main.c **** }
 826              		.loc 1 304 1
 827 0090 00BF     		nop
 828 0092 1837     		adds	r7, r7, #24
 829              	.LCFI33:
 830              		.cfi_def_cfa_offset 8
 831 0094 BD46     		mov	sp, r7
 832              	.LCFI34:
 833              		.cfi_def_cfa_register 13
 834              		@ sp needed
 835 0096 80BD     		pop	{r7, pc}
 836              	.L46:
 837              		.align	2
 838              	.L45:
 839 0098 00000000 		.word	htim1
 840 009c 002C0140 		.word	1073818624
 841              		.cfi_endproc
 842              	.LFE76:
 844              		.section	.text.MX_GPIO_Init,"ax",%progbits
 845              		.align	1
 846              		.syntax unified
 847              		.thumb
 848              		.thumb_func
 849              		.fpu softvfp
 851              	MX_GPIO_Init:
 852              	.LFB77:
 305:Core/Src/main.c **** 
 306:Core/Src/main.c **** /**
 307:Core/Src/main.c ****   * @brief GPIO Initialization Function
 308:Core/Src/main.c ****   * @param None
 309:Core/Src/main.c ****   * @retval None
 310:Core/Src/main.c ****   */
 311:Core/Src/main.c **** static void MX_GPIO_Init(void)
 312:Core/Src/main.c **** {
 853              		.loc 1 312 1
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 32
 856              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 21


 857 0000 80B5     		push	{r7, lr}
 858              	.LCFI35:
 859              		.cfi_def_cfa_offset 8
 860              		.cfi_offset 7, -8
 861              		.cfi_offset 14, -4
 862 0002 88B0     		sub	sp, sp, #32
 863              	.LCFI36:
 864              		.cfi_def_cfa_offset 40
 865 0004 00AF     		add	r7, sp, #0
 866              	.LCFI37:
 867              		.cfi_def_cfa_register 7
 313:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 868              		.loc 1 313 20
 869 0006 07F11003 		add	r3, r7, #16
 870 000a 0022     		movs	r2, #0
 871 000c 1A60     		str	r2, [r3]
 872 000e 5A60     		str	r2, [r3, #4]
 873 0010 9A60     		str	r2, [r3, #8]
 874 0012 DA60     		str	r2, [r3, #12]
 875              	.LBB4:
 314:Core/Src/main.c **** 
 315:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 316:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 876              		.loc 1 316 3
 877 0014 394B     		ldr	r3, .L48
 878 0016 9B69     		ldr	r3, [r3, #24]
 879 0018 384A     		ldr	r2, .L48
 880 001a 43F01003 		orr	r3, r3, #16
 881 001e 9361     		str	r3, [r2, #24]
 882 0020 364B     		ldr	r3, .L48
 883 0022 9B69     		ldr	r3, [r3, #24]
 884 0024 03F01003 		and	r3, r3, #16
 885 0028 FB60     		str	r3, [r7, #12]
 886 002a FB68     		ldr	r3, [r7, #12]
 887              	.LBE4:
 888              	.LBB5:
 317:Core/Src/main.c ****   __HAL_RCC_GPIOD_CLK_ENABLE();
 889              		.loc 1 317 3
 890 002c 334B     		ldr	r3, .L48
 891 002e 9B69     		ldr	r3, [r3, #24]
 892 0030 324A     		ldr	r2, .L48
 893 0032 43F02003 		orr	r3, r3, #32
 894 0036 9361     		str	r3, [r2, #24]
 895 0038 304B     		ldr	r3, .L48
 896 003a 9B69     		ldr	r3, [r3, #24]
 897 003c 03F02003 		and	r3, r3, #32
 898 0040 BB60     		str	r3, [r7, #8]
 899 0042 BB68     		ldr	r3, [r7, #8]
 900              	.LBE5:
 901              	.LBB6:
 318:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 902              		.loc 1 318 3
 903 0044 2D4B     		ldr	r3, .L48
 904 0046 9B69     		ldr	r3, [r3, #24]
 905 0048 2C4A     		ldr	r2, .L48
 906 004a 43F00403 		orr	r3, r3, #4
 907 004e 9361     		str	r3, [r2, #24]
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 22


 908 0050 2A4B     		ldr	r3, .L48
 909 0052 9B69     		ldr	r3, [r3, #24]
 910 0054 03F00403 		and	r3, r3, #4
 911 0058 7B60     		str	r3, [r7, #4]
 912 005a 7B68     		ldr	r3, [r7, #4]
 913              	.LBE6:
 914              	.LBB7:
 319:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 915              		.loc 1 319 3
 916 005c 274B     		ldr	r3, .L48
 917 005e 9B69     		ldr	r3, [r3, #24]
 918 0060 264A     		ldr	r2, .L48
 919 0062 43F00803 		orr	r3, r3, #8
 920 0066 9361     		str	r3, [r2, #24]
 921 0068 244B     		ldr	r3, .L48
 922 006a 9B69     		ldr	r3, [r3, #24]
 923 006c 03F00803 		and	r3, r3, #8
 924 0070 3B60     		str	r3, [r7]
 925 0072 3B68     		ldr	r3, [r7]
 926              	.LBE7:
 320:Core/Src/main.c **** 
 321:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 322:Core/Src/main.c ****   HAL_GPIO_WritePin(LEDc13_GPIO_Port, LEDc13_Pin, GPIO_PIN_RESET);
 927              		.loc 1 322 3
 928 0074 0022     		movs	r2, #0
 929 0076 4FF40051 		mov	r1, #8192
 930 007a 2148     		ldr	r0, .L48+4
 931 007c FFF7FEFF 		bl	HAL_GPIO_WritePin
 323:Core/Src/main.c **** 
 324:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 325:Core/Src/main.c ****   HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 932              		.loc 1 325 3
 933 0080 0022     		movs	r2, #0
 934 0082 4FF40041 		mov	r1, #32768
 935 0086 1F48     		ldr	r0, .L48+8
 936 0088 FFF7FEFF 		bl	HAL_GPIO_WritePin
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 328:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOB, STP_Pin|SLP_Pin|RST_Pin|M2_Pin
 937              		.loc 1 328 3
 938 008c 0022     		movs	r2, #0
 939 008e 4FF47E71 		mov	r1, #1016
 940 0092 1D48     		ldr	r0, .L48+12
 941 0094 FFF7FEFF 		bl	HAL_GPIO_WritePin
 329:Core/Src/main.c ****                           |M1_Pin|M0_Pin|ENA_Pin, GPIO_PIN_RESET);
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /*Configure GPIO pin : LEDc13_Pin */
 332:Core/Src/main.c ****   GPIO_InitStruct.Pin = LEDc13_Pin;
 942              		.loc 1 332 23
 943 0098 4FF40053 		mov	r3, #8192
 944 009c 3B61     		str	r3, [r7, #16]
 333:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 945              		.loc 1 333 24
 946 009e 0123     		movs	r3, #1
 947 00a0 7B61     		str	r3, [r7, #20]
 334:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 948              		.loc 1 334 24
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 23


 949 00a2 0023     		movs	r3, #0
 950 00a4 BB61     		str	r3, [r7, #24]
 335:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 951              		.loc 1 335 25
 952 00a6 0223     		movs	r3, #2
 953 00a8 FB61     		str	r3, [r7, #28]
 336:Core/Src/main.c ****   HAL_GPIO_Init(LEDc13_GPIO_Port, &GPIO_InitStruct);
 954              		.loc 1 336 3
 955 00aa 07F11003 		add	r3, r7, #16
 956 00ae 1946     		mov	r1, r3
 957 00b0 1348     		ldr	r0, .L48+4
 958 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 337:Core/Src/main.c **** 
 338:Core/Src/main.c ****   /*Configure GPIO pin : DIR_Pin */
 339:Core/Src/main.c ****   GPIO_InitStruct.Pin = DIR_Pin;
 959              		.loc 1 339 23
 960 00b6 4FF40043 		mov	r3, #32768
 961 00ba 3B61     		str	r3, [r7, #16]
 340:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 962              		.loc 1 340 24
 963 00bc 0123     		movs	r3, #1
 964 00be 7B61     		str	r3, [r7, #20]
 341:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 965              		.loc 1 341 24
 966 00c0 0023     		movs	r3, #0
 967 00c2 BB61     		str	r3, [r7, #24]
 342:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 968              		.loc 1 342 25
 969 00c4 0223     		movs	r3, #2
 970 00c6 FB61     		str	r3, [r7, #28]
 343:Core/Src/main.c ****   HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 971              		.loc 1 343 3
 972 00c8 07F11003 		add	r3, r7, #16
 973 00cc 1946     		mov	r1, r3
 974 00ce 0D48     		ldr	r0, .L48+8
 975 00d0 FFF7FEFF 		bl	HAL_GPIO_Init
 344:Core/Src/main.c **** 
 345:Core/Src/main.c ****   /*Configure GPIO pins : STP_Pin SLP_Pin RST_Pin M2_Pin
 346:Core/Src/main.c ****                            M1_Pin M0_Pin ENA_Pin */
 347:Core/Src/main.c ****   GPIO_InitStruct.Pin = STP_Pin|SLP_Pin|RST_Pin|M2_Pin
 976              		.loc 1 347 23
 977 00d4 4FF47E73 		mov	r3, #1016
 978 00d8 3B61     		str	r3, [r7, #16]
 348:Core/Src/main.c ****                           |M1_Pin|M0_Pin|ENA_Pin;
 349:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 979              		.loc 1 349 24
 980 00da 0123     		movs	r3, #1
 981 00dc 7B61     		str	r3, [r7, #20]
 350:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 982              		.loc 1 350 24
 983 00de 0023     		movs	r3, #0
 984 00e0 BB61     		str	r3, [r7, #24]
 351:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 985              		.loc 1 351 25
 986 00e2 0223     		movs	r3, #2
 987 00e4 FB61     		str	r3, [r7, #28]
 352:Core/Src/main.c ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 24


 988              		.loc 1 352 3
 989 00e6 07F11003 		add	r3, r7, #16
 990 00ea 1946     		mov	r1, r3
 991 00ec 0648     		ldr	r0, .L48+12
 992 00ee FFF7FEFF 		bl	HAL_GPIO_Init
 353:Core/Src/main.c **** 
 354:Core/Src/main.c **** }
 993              		.loc 1 354 1
 994 00f2 00BF     		nop
 995 00f4 2037     		adds	r7, r7, #32
 996              	.LCFI38:
 997              		.cfi_def_cfa_offset 8
 998 00f6 BD46     		mov	sp, r7
 999              	.LCFI39:
 1000              		.cfi_def_cfa_register 13
 1001              		@ sp needed
 1002 00f8 80BD     		pop	{r7, pc}
 1003              	.L49:
 1004 00fa 00BF     		.align	2
 1005              	.L48:
 1006 00fc 00100240 		.word	1073876992
 1007 0100 00100140 		.word	1073811456
 1008 0104 00080140 		.word	1073809408
 1009 0108 000C0140 		.word	1073810432
 1010              		.cfi_endproc
 1011              	.LFE77:
 1013              		.section	.text.Error_Handler,"ax",%progbits
 1014              		.align	1
 1015              		.global	Error_Handler
 1016              		.syntax unified
 1017              		.thumb
 1018              		.thumb_func
 1019              		.fpu softvfp
 1021              	Error_Handler:
 1022              	.LFB78:
 355:Core/Src/main.c **** 
 356:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 357:Core/Src/main.c **** 
 358:Core/Src/main.c **** /* USER CODE END 4 */
 359:Core/Src/main.c **** 
 360:Core/Src/main.c **** /**
 361:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 362:Core/Src/main.c ****   * @retval None
 363:Core/Src/main.c ****   */
 364:Core/Src/main.c **** void Error_Handler(void)
 365:Core/Src/main.c **** {
 1023              		.loc 1 365 1
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 1, uses_anonymous_args = 0
 1027              		@ link register save eliminated.
 1028 0000 80B4     		push	{r7}
 1029              	.LCFI40:
 1030              		.cfi_def_cfa_offset 4
 1031              		.cfi_offset 7, -4
 1032 0002 00AF     		add	r7, sp, #0
 1033              	.LCFI41:
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 25


 1034              		.cfi_def_cfa_register 7
 1035              	.LBB8:
 1036              	.LBB9:
 1037              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 26


  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 27


 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 1038              		.loc 2 142 3
 1039              		.syntax unified
 1040              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1041 0004 72B6     		cpsid i
 1042              	@ 0 "" 2
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1043              		.loc 2 143 1
 1044              		.thumb
 1045              		.syntax unified
 1046 0006 00BF     		nop
 1047              	.L51:
 1048              	.LBE9:
 1049              	.LBE8:
 366:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 367:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 368:Core/Src/main.c ****   __disable_irq();
 369:Core/Src/main.c ****   while (1)
 1050              		.loc 1 369 9 discriminator 1
 1051 0008 FEE7     		b	.L51
 1052              		.cfi_endproc
 1053              	.LFE78:
 1055              		.text
 1056              	.Letext0:
 1057              		.file 3 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\
 1058              		.file 4 "c:\\arm-gcc\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_std
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 28


 1059              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 1060              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1061              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
 1062              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc_ex.h"
 1063              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1064              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1065              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 29


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:20     .bss.htim1:00000000 htim1
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:17     .bss.htim1:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:27     .bss.iStep:00000000 iStep
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:24     .bss.iStep:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:34     .data.MeioPeriodo:00000000 MeioPeriodo
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:31     .data.MeioPeriodo:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:41     .data.PPS:00000000 PPS
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:38     .data.PPS:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:48     .data.PPR:00000000 PPR
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:45     .data.PPR:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:55     .bss.Pulsos:00000000 Pulsos
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:52     .bss.Pulsos:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:62     .bss.Voltas:00000000 Voltas
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:59     .bss.Voltas:00000000 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:65     .text.rst_DRV8825:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:73     .text.rst_DRV8825:00000000 rst_DRV8825
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:110    .text.rst_DRV8825:00000028 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:115    .text.disa_DRV8825:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:122    .text.disa_DRV8825:00000000 disa_DRV8825
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:150    .text.disa_DRV8825:0000001c $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:155    .text.ena_DRV8825:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:162    .text.ena_DRV8825:00000000 ena_DRV8825
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:190    .text.ena_DRV8825:0000001c $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:195    .text.HOR:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:202    .text.HOR:00000000 HOR
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:227    .text.HOR:00000014 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:232    .text.AHR:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:239    .text.AHR:00000000 AHR
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:264    .text.AHR:00000014 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:269    .text.PASSO:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:276    .text.PASSO:00000000 PASSO
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:312    .text.PASSO:00000028 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:317    .text.P1_32:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:324    .text.P1_32:00000000 P1_32
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:363    .text.P1_32:00000030 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:369    .text.TesteMotor:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:376    .text.TesteMotor:00000000 TesteMotor
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:464    .text.TesteMotor:0000006c $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:469    .text.Frequencia:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:476    .text.Frequencia:00000000 Frequencia
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:517    .text.Frequencia:00000024 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:525    .text.main:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:532    .text.main:00000000 main
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:616    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:851    .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:726    .text.MX_TIM1_Init:00000000 MX_TIM1_Init
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:602    .text.main:00000070 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:609    .text.SystemClock_Config:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:1021   .text.Error_Handler:00000000 Error_Handler
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:720    .text.MX_TIM1_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:839    .text.MX_TIM1_Init:00000098 $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:845    .text.MX_GPIO_Init:00000000 $t
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:1006   .text.MX_GPIO_Init:000000fc $d
C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s:1014   .text.Error_Handler:00000000 $t

ARM GAS  C:\Users\danie\AppData\Local\Temp\ccTKLL2A.s 			page 30


UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_Delay
HAL_Init
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_GPIO_Init
